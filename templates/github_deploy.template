name: 'Deploy Auto App Store: Android-V{{ANDROID_VERSION_NAME}}-{{ANDROID_VERSION_CODE}}_IOS-V{{IOS_VERSION_NAME}}-{{IOS_VERSION_CODE}}'

on:
  push:
    tags: 
      - 'android-*'
      - 'v*'
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - production
      platforms:
        description: 'Platforms to deploy'
        required: true
        default: 'android'
        type: choice
        options:
          - ios
          - android
          - all

jobs:
  # Validation and setup job
  validate:
    name: 'Validate Environment'
    runs-on: ubuntu-latest
    
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      platforms: ${{ steps.config.outputs.platforms }}
      version: ${{ steps.config.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version from pubspec.yaml
      id: version
      run: |
        VERSION=$(grep "version:" pubspec.yaml | cut -d' ' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Configure deployment
      id: config
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "platforms=${{ github.event.inputs.platforms }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == *"beta"* ]]; then
          echo "environment=beta" >> $GITHUB_OUTPUT
          echo "platforms=android" >> $GITHUB_OUTPUT
        else
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "platforms=android" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate configuration
      run: |
        echo "🚀 Deployment Configuration:"
        echo "Environment: ${{ steps.config.outputs.environment }}"
        echo "Platforms: ${{ steps.config.outputs.platforms }}"
        echo "Version: ${{ steps.version.outputs.version }}"
        echo "Git Ref: ${{ github.ref }}"

  # Android deployment job
  deploy-android:
    name: 'Deploy Android'
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.platforms == 'android' || needs.validate.outputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '17'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.1'
        channel: 'stable'
        cache: true
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        working-directory: android
    
    - name: Create l10n directory
      run: |
        mkdir -p lib/l10n
        if [ ! -f lib/l10n/app_en.arb ]; then
          echo '{"@@locale": "en", "appTitle": "App", "@appTitle": {"description": "The title of the application"}}' > lib/l10n/app_en.arb
        fi
    
    - name: Create l10n directory
      run: |
        mkdir -p lib/l10n
        if [ ! -f lib/l10n/app_en.arb ]; then
          echo '{"@@locale": "en", "appTitle": "App", "@appTitle": {"description": "The title of the application"}}' > lib/l10n/app_en.arb
        fi
    
    - name: Get Flutter dependencies
      run: flutter pub get
    
    - name: Setup Android keystore
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "🔐 Setting up Android keystore..."
        
        # Validate that the keystore secret exists and is not empty
        if [ -z "$ANDROID_KEYSTORE_BASE64" ]; then
          echo "❌ Error: ANDROID_KEYSTORE_BASE64 secret is not set or empty"
          echo "Please set the ANDROID_KEYSTORE_BASE64 secret in GitHub repository settings"
          exit 1
        fi
        
        # Check base64 string length
        echo "📊 Keystore base64 string length: ${#ANDROID_KEYSTORE_BASE64}"
        
        # Try to decode keystore with error handling
        if echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/app.keystore 2>/dev/null; then
          echo "✅ Keystore base64 decode successful"
        else
          echo "❌ Keystore base64 decode failed - trying with padding fix..."
          # Add padding if needed and retry
          PADDED_KEYSTORE=$(echo "$ANDROID_KEYSTORE_BASE64" | sed 's/$/===/' | fold -w 4 | sed '$ s/=*$//' | tr -d '\n')
          if echo "$PADDED_KEYSTORE" | base64 -d > android/app/app.keystore 2>/dev/null; then
            echo "✅ Keystore base64 decode successful with padding fix"
          else
            echo "❌ Error: Failed to decode ANDROID_KEYSTORE_BASE64"
            echo "Please check that the secret contains valid base64 encoded keystore"
            exit 1
          fi
        fi
        
        # Validate keystore file was created
        if [ -f "android/app/app.keystore" ] && [ -s "android/app/app.keystore" ]; then
          echo "📄 Keystore file created successfully"
        else
          echo "❌ Error: Keystore file was not created or is empty"
          exit 1
        fi
        
        # Create key.properties
        cat > android/key.properties << EOF
        storeFile=app.keystore
        storePassword=$KEYSTORE_PASSWORD
        keyAlias=$KEY_ALIAS
        keyPassword=$KEY_PASSWORD
        EOF
        
        echo "✅ Keystore setup completed"
    
    - name: Setup Google Play Service Account
      env:
        PLAY_STORE_JSON_BASE64: ${{ secrets.PLAY_STORE_JSON_BASE64 }}
      run: |
        echo "🔑 Setting up Google Play service account..."
        
        # Validate that the secret exists and is not empty
        if [ -z "$PLAY_STORE_JSON_BASE64" ]; then
          echo "❌ Error: PLAY_STORE_JSON_BASE64 secret is not set or empty"
          echo "Please set the PLAY_STORE_JSON_BASE64 secret in GitHub repository settings"
          exit 1
        fi
        
        # Check base64 string length and format
        echo "📊 Base64 string length: ${#PLAY_STORE_JSON_BASE64}"
        
        # Try to decode with error handling
        if echo "$PLAY_STORE_JSON_BASE64" | base64 -d > android/fastlane/play_store_service_account.json 2>/dev/null; then
          echo "✅ Base64 decode successful"
        else
          echo "❌ Base64 decode failed - trying with padding fix..."
          # Add padding if needed and retry
          PADDED_BASE64=$(echo "$PLAY_STORE_JSON_BASE64" | sed 's/$/===/' | fold -w 4 | sed '$ s/=*$//' | tr -d '\n')
          if echo "$PADDED_BASE64" | base64 -d > android/fastlane/play_store_service_account.json 2>/dev/null; then
            echo "✅ Base64 decode successful with padding fix"
          else
            echo "❌ Error: Failed to decode PLAY_STORE_JSON_BASE64"
            echo "Please check that the secret contains valid base64 encoded JSON"
            exit 1
          fi
        fi
        
        # Validate the decoded JSON file
        if [ -f "android/fastlane/play_store_service_account.json" ] && [ -s "android/fastlane/play_store_service_account.json" ]; then
          echo "📄 Service account JSON file created successfully"
          # Validate JSON format
          if python3 -m json.tool android/fastlane/play_store_service_account.json > /dev/null 2>&1; then
            echo "✅ JSON format validation passed"
          else
            echo "❌ Error: Decoded content is not valid JSON"
            exit 1
          fi
        else
          echo "❌ Error: Service account JSON file was not created or is empty"
          exit 1
        fi
        
        echo "FASTLANE_JSON_KEY_FILE=play_store_service_account.json" >> $GITHUB_ENV
        echo "✅ Service account setup completed"
    
    - name: Run Android tests
      run: |
        if [ -d "test" ]; then
          echo "🧪 Running Flutter tests..."
          flutter test
        else
          echo "⚠️ No test directory found, skipping tests"
        fi
    
    - name: Build Android AAB
      run: |
        echo "📦 Building Android App Bundle..."
        flutter build appbundle --release
        echo "✅ AAB build completed"
        ls -la build/app/outputs/bundle/release/
    
    - name: Deploy Android app
      working-directory: android
      env:
        FASTLANE_JSON_KEY_FILE: play_store_service_account.json
        ROLLOUT_PERCENTAGE: ${{ needs.validate.outputs.environment == 'production' && '100' || '100' }}
      run: |
        if [[ "${{ needs.validate.outputs.environment }}" == "beta" ]]; then
          echo "🚀 Deploying to Play Store Internal Testing..."
          bundle exec fastlane android beta
        else
          echo "🎯 Deploying to Play Store Production..."
          bundle exec fastlane android upload_aab_production
        fi
    
    - name: Cleanup sensitive files
      if: always()
      run: |
        rm -f android/app/app.keystore
        rm -f android/key.properties
        rm -f android/fastlane/play_store_service_account.json
    
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-build-artifacts
        path: |
          build/app/outputs/bundle/release/app-release.aab
          build/app/outputs/apk/release/app-release.apk
        retention-days: 30

  # iOS deployment job (macOS runner required)
  deploy-ios:
    name: 'Deploy iOS'
    runs-on: macos-latest
    needs: validate
    if: needs.validate.outputs.platforms == 'ios' || needs.validate.outputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.1'
        channel: 'stable'
        cache: true
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        working-directory: ios
    
    - name: Get Flutter dependencies
      run: flutter pub get
    
    - name: Setup CocoaPods
      run: cd ios && pod install
    
    - name: Setup iOS signing
      env:
        APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
        APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
        APP_STORE_KEY_CONTENT: ${{ secrets.APP_STORE_KEY_CONTENT }}
      run: |
        if [[ -n "$APP_STORE_KEY_ID" && -n "$APP_STORE_ISSUER_ID" && -n "$APP_STORE_KEY_CONTENT" ]]; then
          echo "🔑 Setting up App Store Connect API authentication..."
          
          # Check base64 string length
          echo "📊 App Store key base64 string length: ${#APP_STORE_KEY_CONTENT}"
          
          # Try to decode App Store key with error handling
          if echo "$APP_STORE_KEY_CONTENT" | base64 -d > ios/fastlane/AuthKey_$APP_STORE_KEY_ID.p8 2>/dev/null; then
            echo "✅ App Store key base64 decode successful"
          else
            echo "❌ App Store key base64 decode failed - trying with padding fix..."
            # Add padding if needed and retry
            PADDED_KEY=$(echo "$APP_STORE_KEY_CONTENT" | sed 's/$/===/' | fold -w 4 | sed '$ s/=*$//' | tr -d '\n')
            if echo "$PADDED_KEY" | base64 -d > ios/fastlane/AuthKey_$APP_STORE_KEY_ID.p8 2>/dev/null; then
              echo "✅ App Store key base64 decode successful with padding fix"
            else
              echo "❌ Error: Failed to decode APP_STORE_KEY_CONTENT"
              echo "Please check that the secret contains valid base64 encoded key"
              exit 1
            fi
          fi
          
          # Validate key file was created
          if [ -f "ios/fastlane/AuthKey_$APP_STORE_KEY_ID.p8" ] && [ -s "ios/fastlane/AuthKey_$APP_STORE_KEY_ID.p8" ]; then
            echo "📄 App Store key file created successfully"
          else
            echo "❌ Error: App Store key file was not created or is empty"
            exit 1
          fi
          
          echo "✅ App Store Connect API configured"
        else
          echo "⚠️ App Store Connect API not configured, skipping iOS deployment"
          exit 0
        fi
    
    - name: Run iOS tests
      run: flutter test
    
    - name: Deploy iOS app
      working-directory: ios
      env:
        APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
        APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
        APP_STORE_KEY_CONTENT: ${{ secrets.APP_STORE_KEY_CONTENT }}
      run: |
        if [[ "${{ needs.validate.outputs.environment }}" == "beta" ]]; then
          echo "🚀 Deploying to TestFlight..."
          bundle exec fastlane ios beta
        else
          echo "🎯 Deploying to App Store..."
          bundle exec fastlane ios release
        fi
    
    - name: Cleanup sensitive files
      if: always()
      run: |
        rm -f /tmp/AuthKey_*.p8
        rm -f /tmp/dist_cert.p12
        rm -f /tmp/profile.mobileprovision
    
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          ios/fastlane/builds/*.ipa
        retention-days: 30

  # Deployment summary
  summary:
    name: 'Deployment Summary'
    runs-on: ubuntu-latest
    needs: [validate, deploy-android, deploy-ios]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Project:** {{PROJECT_NAME}}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** ${{ needs.validate.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Android status
        if [[ "${{ needs.validate.outputs.platforms }}" == "android" || "${{ needs.validate.outputs.platforms }}" == "all" ]]; then
          if [[ "${{ needs.deploy-android.result }}" == "success" ]]; then
            echo "✅ **Android:** Deployment successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Android:** Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # iOS status  
        if [[ "${{ needs.validate.outputs.platforms }}" == "ios" || "${{ needs.validate.outputs.platforms }}" == "all" ]]; then
          if [[ "${{ needs.deploy-ios.result }}" == "success" ]]; then
            echo "✅ **iOS:** Deployment successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **iOS:** Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Git Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY