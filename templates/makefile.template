# ═══════════════════════════════════════════════════════════════════════════════
# 🚀 APPAUTODEPLOY MAKEFILE
# ═══════════════════════════════════════════════════════════════════════════════
# Generated by AppAutoDeploy - Advanced Flutter Build Automation
# Supports platform-specific builds with --android and --ios flags
# ═══════════════════════════════════════════════════════════════════════════════

# ═══════════════════════════════════════════════════════════════════════════════
# 📋 PROJECT CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

PROJECT_NAME := {{PROJECT_NAME}}
APP_NAME := {{APP_NAME}}
FLUTTER_VERSION := {{FLUTTER_VERSION}}
PACKAGE_NAME := {{PACKAGE_NAME}}

# Version fallbacks (will be overridden by dynamic version manager)
VERSION_FULL := {{VERSION_FULL}}
VERSION_NAME := {{VERSION_NAME}}
VERSION_CODE := {{VERSION_CODE}}

# Output file names
APK_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE).apk
AAB_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE).aab
IPA_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE).ipa

# AppAutoDeploy script directory
APPAUTODEPLOY_SCRIPTS_DIR := {{APPAUTODEPLOY_SCRIPTS_DIR}}

# Build output directory
BUILD_DIR := build_output

# ═══════════════════════════════════════════════════════════════════════════════
# 🎨 COLORS AND SYMBOLS
# ═══════════════════════════════════════════════════════════════════════════════

RED := \033[0;31m
GREEN := \033[0;32m
BLUE := \033[0;34m
YELLOW := \033[1;33m
PURPLE := \033[0;35m
CYAN := \033[0;36m
WHITE := \033[1;37m
NC := \033[0m

CHECK := ✅
CROSS := ❌
WARNING := ⚠️
INFO := 💡
ROCKET := 🚀
GEAR := ⚙️
FOLDER := 📁
MOBILE := 📱
APPLE := 🍎
ROBOT := 🤖

# ═══════════════════════════════════════════════════════════════════════════════
# 🖨️ PRINT FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

define print_header
	@printf "\n$(BLUE)╔═══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(WHITE)$(1)$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚═══════════════════════════════════════════════════════════════╝$(NC)\n\n"
endef

define print_step
	@printf "$(YELLOW)$(GEAR) $(1)$(NC)\n"
endef

define print_success
	@printf "$(GREEN)$(CHECK) $(1)$(NC)\n"
endef

define print_error
	@printf "$(RED)$(CROSS) $(1)$(NC)\n"
endef

define print_warning
	@printf "$(YELLOW)$(WARNING) $(1)$(NC)\n"
endef

define print_info
	@printf "$(CYAN)$(INFO) $(1)$(NC)\n"
endef

# ═══════════════════════════════════════════════════════════════════════════════
# 🎯 PLATFORM DETECTION
# ═══════════════════════════════════════════════════════════════════════════════

# Detect platform arguments from command line
PLATFORM_ARG := $(filter --android --ios,$(MAKECMDGOALS))
BUILD_ANDROID := $(if $(filter --android,$(MAKECMDGOALS)),true,$(if $(PLATFORM_ARG),,true))
BUILD_IOS := $(if $(filter --ios,$(MAKECMDGOALS)),true,$(if $(PLATFORM_ARG),,true))

# Dummy targets for platform flags (prevents make from treating them as files)
--android:
	@:
--ios:
	@:

# ═══════════════════════════════════════════════════════════════════════════════
# 📱 INTERACTIVE MENU
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: menu
menu: ## 📱 Interactive build menu
	$(call print_header,🚀 AppAutoDeploy Build Menu)
	@printf "$(CYAN)Choose your build pipeline:$(NC)\n\n"
	@printf "$(YELLOW)1.$(NC) $(MOBILE) Tester Pipeline (APK + TestFlight)\n"
	@printf "$(YELLOW)2.$(NC) $(ROCKET) Live Local Pipeline (AAB + App Store)\n"
	@printf "$(YELLOW)3.$(NC) $(ROBOT) Live GitHub Pipeline (Trigger CI/CD)\n"
	@printf "$(YELLOW)4.$(NC) $(GEAR) Live Hybrid Pipeline (Local + GitHub)\n\n"
	@printf "$(CYAN)Advanced Options:$(NC)\n"
	@printf "$(YELLOW)5.$(NC) $(GEAR) System Check\n"
	@printf "$(YELLOW)6.$(NC) $(FOLDER) Clean Build\n"
	@printf "$(YELLOW)7.$(NC) $(INFO) Help\n\n"
	@printf "$(CYAN)Platform-specific builds:$(NC)\n"
	@printf "$(YELLOW)•$(NC) Add --android for Android only\n"
	@printf "$(YELLOW)•$(NC) Add --ios for iOS only\n"
	@printf "$(YELLOW)•$(NC) Examples: make tester --android, make live --ios\n\n"

# ═══════════════════════════════════════════════════════════════════════════════
# 🔍 DEPENDENCY CHECKS
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: check-deps
check-deps: ## 🔍 Check system dependencies
	$(call print_step,Checking system dependencies...)
	@if command -v flutter >/dev/null 2>&1; then \
		$(call print_success,Flutter installed); \
	else \
		$(call print_error,Flutter not installed); \
		exit 1; \
	fi
	@if [ -f "pubspec.yaml" ]; then \
		$(call print_success,pubspec.yaml found); \
	else \
		$(call print_error,pubspec.yaml missing); \
		exit 1; \
	fi
ifeq ($(BUILD_ANDROID),true)
	@if [ -d "android" ]; then \
		$(call print_success,Android directory found); \
	else \
		$(call print_error,Android directory missing); \
		exit 1; \
	fi
endif
ifeq ($(BUILD_IOS),true)
	@if [ -d "ios" ]; then \
		$(call print_success,iOS directory found); \
	else \
		$(call print_error,iOS directory missing); \
		exit 1; \
	fi
endif

# ═══════════════════════════════════════════════════════════════════════════════
# 📦 VERSION MANAGEMENT
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: version-interactive
version-interactive: ## 📦 Interactive version management
	$(call print_step,Starting interactive version management...)
	@if command -v dart >/dev/null 2>&1; then \
		if dart $(APPAUTODEPLOY_SCRIPTS_DIR)/dynamic_version_manager.dart interactive; then \
			$(call print_success,Version management completed); \
		else \
			$(call print_warning,Interactive version failed - using fallback); \
			dart $(APPAUTODEPLOY_SCRIPTS_DIR)/dynamic_version_manager.dart set-strategy fallback_only; \
			dart $(APPAUTODEPLOY_SCRIPTS_DIR)/dynamic_version_manager.dart apply; \
		fi; \
	else \
		$(call print_error,Dart not found - cannot manage versions); \
		exit 1; \
	fi

.PHONY: create-git-tag
create-git-tag: ## 🏷️ Create and push git tag based on current version and platform
	$(call print_step,Creating and pushing git tag...)
	@ANDROID_VERSION_NAME=$$(dart $(APPAUTODEPLOY_SCRIPTS_DIR)/dynamic_version_manager.dart get-version-name 2>/dev/null || echo "1.0.0"); \
	ANDROID_VERSION_CODE=$$(dart $(APPAUTODEPLOY_SCRIPTS_DIR)/dynamic_version_manager.dart get-version-code 2>/dev/null || echo "1"); \
	if [ "$(BUILD_ANDROID)" = "true" ] && [ "$(BUILD_IOS)" = "true" ]; then \
		TAG_NAME="v$$ANDROID_VERSION_NAME-$$ANDROID_VERSION_CODE"; \
	elif [ "$(BUILD_ANDROID)" = "true" ]; then \
		TAG_NAME="android-v$$ANDROID_VERSION_NAME-$$ANDROID_VERSION_CODE"; \
	elif [ "$(BUILD_IOS)" = "true" ]; then \
		TAG_NAME="ios-v$$ANDROID_VERSION_NAME-$$ANDROID_VERSION_CODE"; \
	else \
		TAG_NAME="v$$ANDROID_VERSION_NAME-$$ANDROID_VERSION_CODE"; \
	fi; \
	git tag -a "$$TAG_NAME" -m "Release $$TAG_NAME - Platform: $(if $(filter true,$(BUILD_ANDROID)),Android,)$(if $(filter true,$(BUILD_IOS)),$(if $(filter true,$(BUILD_ANDROID)), + ,)iOS,)"; \
	git push origin "$$TAG_NAME"; \
	$(call print_success,Git tag $$TAG_NAME created and pushed)

# ═══════════════════════════════════════════════════════════════════════════════
# 🏗️ BUILD PREPARATION
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: prepare-build
prepare-build: ## 🏗️ Prepare build environment
	$(call print_step,Preparing build environment...)
	@mkdir -p $(BUILD_DIR)
	$(call print_success,Build directory created)
	@if command -v dart >/dev/null 2>&1; then \
		if dart $(APPAUTODEPLOY_SCRIPTS_DIR)/build_info_generator.dart; then \
			$(call print_success,Build information generated); \
		else \
			$(call print_warning,Build info generation failed - continuing); \
		fi; \
	fi

# ═══════════════════════════════════════════════════════════════════════════════
# 📱 ANDROID BUILD FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: build-android-apk
build-android-apk: ## 📱 Build Android APK
	$(call print_step,Building Android APK...)
	@flutter clean
	@flutter pub get
	@flutter build apk --release
	@if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then \
		cp "build/app/outputs/flutter-apk/app-release.apk" "$(BUILD_DIR)/$(APK_NAME)"; \
		APK_SIZE=$$(du -h "$(BUILD_DIR)/$(APK_NAME)" | awk '{print $$1}'); \
		$(call print_success,Android APK built: $(BUILD_DIR)/$(APK_NAME) ($$APK_SIZE)); \
	else \
		$(call print_error,Android APK build failed); \
		exit 1; \
	fi

.PHONY: build-android-aab
build-android-aab: ## 📱 Build Android AAB
	$(call print_step,Building Android AAB...)
	@flutter clean
	@flutter pub get
	@flutter build appbundle --release
	@if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then \
		cp "build/app/outputs/bundle/release/app-release.aab" "$(BUILD_DIR)/$(AAB_NAME)"; \
		AAB_SIZE=$$(du -h "$(BUILD_DIR)/$(AAB_NAME)" | awk '{print $$1}'); \
		$(call print_success,Android AAB built: $(BUILD_DIR)/$(AAB_NAME) ($$AAB_SIZE)); \
	else \
		$(call print_error,Android AAB build failed); \
		exit 1; \
	fi

# ═══════════════════════════════════════════════════════════════════════════════
# 🍎 iOS BUILD FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: build-ios-ipa
build-ios-ipa: ## 🍎 Build iOS IPA
	$(call print_step,Building iOS IPA...)
	@if [ "$$(uname)" != "Darwin" ]; then \
		$(call print_error,iOS builds require macOS); \
		exit 1; \
	fi
	$(call print_step,Cleaning iOS dependencies...)
	@cd ios && rm -rf Pods Podfile.lock && pod install && cd ..
	@flutter build ios --release
	@if [ $$? -eq 0 ]; then \
		$(call print_step,Creating IPA with Fastlane...); \
		if command -v fastlane >/dev/null 2>&1 && [ -f "ios/fastlane/Fastfile" ]; then \
			cd ios && fastlane build_archive_beta && cd ..; \
			if [ -f "build/ios/ipa/$(IPA_NAME)" ]; then \
				cp "build/ios/ipa/$(IPA_NAME)" "$(BUILD_DIR)/$(IPA_NAME)"; \
				IPA_SIZE=$$(du -h "$(BUILD_DIR)/$(IPA_NAME)" | awk '{print $$1}'); \
				$(call print_success,iOS IPA built: $(BUILD_DIR)/$(IPA_NAME) ($$IPA_SIZE)); \
			else \
				$(call print_error,IPA file not found after Fastlane build); \
				exit 1; \
			fi; \
		else \
			$(call print_warning,Fastlane not available - using xcodebuild); \
			$(call print_error,Manual IPA creation not implemented yet); \
			exit 1; \
		fi; \
	else \
		$(call print_error,iOS build failed); \
		exit 1; \
	fi

.PHONY: upload-ios-testflight
upload-ios-testflight: ## 🍎 Upload iOS to TestFlight
	$(call print_step,Uploading to TestFlight...)
	@if command -v fastlane >/dev/null 2>&1 && [ -f "ios/fastlane/Fastfile" ]; then \
		cd ios && fastlane upload_testflight && cd ..; \
		$(call print_success,iOS uploaded to TestFlight); \
	else \
		$(call print_error,Fastlane not available for TestFlight upload); \
		exit 1; \
	fi

.PHONY: upload-ios-appstore
upload-ios-appstore: ## 🍎 Upload iOS to App Store
	$(call print_step,Uploading to App Store...)
	@if command -v fastlane >/dev/null 2>&1 && [ -f "ios/fastlane/Fastfile" ]; then \
		cd ios && fastlane upload_appstore && cd ..; \
		$(call print_success,iOS uploaded to App Store); \
	else \
		$(call print_error,Fastlane not available for App Store upload); \
		exit 1; \
	fi

# ═══════════════════════════════════════════════════════════════════════════════
# 🧪 TESTER PIPELINE
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: tester
tester: ## 🧪 Automated Tester Pipeline (APK + TestFlight) - Use --android or --ios for platform-specific builds
	$(call print_header,🧪 Building for Testing)
	@printf "$(CYAN)Platform Configuration:$(NC)\n"
	@printf "$(YELLOW)• Android: $(if $(filter true,$(BUILD_ANDROID)),$(GREEN)Enabled$(NC),$(RED)Disabled$(NC))$(NC)\n"
	@printf "$(YELLOW)• iOS: $(if $(filter true,$(BUILD_IOS)),$(GREEN)Enabled$(NC),$(RED)Disabled$(NC))$(NC)\n\n"
	
	@$(MAKE) check-deps
	@$(MAKE) version-interactive
	@$(MAKE) prepare-build
	
ifeq ($(BUILD_ANDROID),true)
	@$(MAKE) build-android-apk
endif

ifeq ($(BUILD_IOS),true)
	@$(MAKE) build-ios-ipa
	@$(MAKE) upload-ios-testflight
endif

	$(call print_header,🎉 Tester Build Complete!)
	@printf "$(GREEN)Build artifacts available in: $(BUILD_DIR)/$(NC)\n"
ifeq ($(BUILD_ANDROID),true)
	@printf "$(YELLOW)📱 Android APK: $(BUILD_DIR)/$(APK_NAME)$(NC)\n"
endif
ifeq ($(BUILD_IOS),true)
	@printf "$(YELLOW)🍎 iOS IPA: $(BUILD_DIR)/$(IPA_NAME)$(NC)\n"
	@printf "$(YELLOW)🍎 TestFlight: Upload completed$(NC)\n"
endif

# ═══════════════════════════════════════════════════════════════════════════════
# 🚀 LIVE PIPELINE
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: live
live: ## 🚀 Automated Live Pipeline (AAB + App Store) - Use --android or --ios for platform-specific builds
	$(call print_header,🚀 Building for Production)
	@printf "$(CYAN)Platform Configuration:$(NC)\n"
	@printf "$(YELLOW)• Android: $(if $(filter true,$(BUILD_ANDROID)),$(GREEN)Enabled$(NC),$(RED)Disabled$(NC))$(NC)\n"
	@printf "$(YELLOW)• iOS: $(if $(filter true,$(BUILD_IOS)),$(GREEN)Enabled$(NC),$(RED)Disabled$(NC))$(NC)\n\n"
	
	@$(MAKE) check-deps
	@$(MAKE) version-interactive
	@$(MAKE) prepare-build
	
ifeq ($(BUILD_ANDROID),true)
	@$(MAKE) build-android-aab
endif

ifeq ($(BUILD_IOS),true)
	@$(MAKE) build-ios-ipa
	@$(MAKE) upload-ios-appstore
endif

	$(call print_header,🎉 Live Build Complete!)
	@printf "$(GREEN)Build artifacts available in: $(BUILD_DIR)/$(NC)\n"
ifeq ($(BUILD_ANDROID),true)
	@printf "$(YELLOW)📱 Android AAB: $(BUILD_DIR)/$(AAB_NAME)$(NC)\n"
endif
ifeq ($(BUILD_IOS),true)
	@printf "$(YELLOW)🍎 iOS IPA: $(BUILD_DIR)/$(IPA_NAME)$(NC)\n"
	@printf "$(YELLOW)🍎 App Store: Upload completed$(NC)\n"
endif

# ═══════════════════════════════════════════════════════════════════════════════
# 🤖 GITHUB PIPELINE
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: live-github
live-github: ## 🤖 Automated GitHub Pipeline (Trigger CI/CD) - Use --android or --ios for platform-specific builds
	$(call print_header,🤖 Triggering GitHub Actions)
	@printf "$(CYAN)Platform Configuration:$(NC)\n"
	@printf "$(YELLOW)• Android: $(if $(filter true,$(BUILD_ANDROID)),$(GREEN)Enabled$(NC),$(RED)Disabled$(NC))$(NC)\n"
	@printf "$(YELLOW)• iOS: $(if $(filter true,$(BUILD_IOS)),$(GREEN)Enabled$(NC),$(RED)Disabled$(NC))$(NC)\n\n"
	
	@$(MAKE) check-deps
	@$(MAKE) version-interactive
	@$(MAKE) create-git-tag
	
	$(call print_header,🎉 GitHub Actions Triggered!)
	@printf "$(GREEN)GitHub Actions will handle the build process$(NC)\n"
	@printf "$(YELLOW)Check your repository's Actions tab for build progress$(NC)\n"

# ═══════════════════════════════════════════════════════════════════════════════
# 🛠️ UTILITY COMMANDS
# ═══════════════════════════════════════════════════════════════════════════════

.PHONY: clean
clean: ## 🧹 Clean build artifacts
	$(call print_step,Cleaning build artifacts...)
	@flutter clean
	@rm -rf $(BUILD_DIR)
	@rm -rf build/
	$(call print_success,Clean completed)

.PHONY: deps
deps: ## 📦 Install dependencies
	$(call print_step,Installing dependencies...)
	@flutter pub get
	@if [ -d "ios" ] && [ "$$(uname)" = "Darwin" ]; then \
		cd ios && pod install && cd ..; \
	fi
	$(call print_success,Dependencies installed)

.PHONY: doctor
doctor: ## 🩺 Run Flutter doctor
	@flutter doctor -v

.PHONY: help
help: ## 📖 Show this help message
	@printf "$(CYAN)AppAutoDeploy Makefile Commands:$(NC)\n\n"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@printf "\n$(CYAN)Platform-specific builds:$(NC)\n"
	@printf "$(YELLOW)• --android$(NC)  Build only for Android\n"
	@printf "$(YELLOW)• --ios$(NC)      Build only for iOS\n"
	@printf "$(YELLOW)• (no flag)$(NC)  Build for both platforms\n\n"
	@printf "$(CYAN)Examples:$(NC)\n"
	@printf "$(YELLOW)make tester --android$(NC)     # Build APK and skip iOS\n"
	@printf "$(YELLOW)make live --ios$(NC)           # Build iOS only for production\n"
	@printf "$(YELLOW)make live-github --android$(NC) # Trigger GitHub Actions for Android\n\n"

.DEFAULT_GOAL := menu