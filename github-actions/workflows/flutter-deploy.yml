name: 'Flutter App Deployment'

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      
      environment:
        description: 'Deployment environment (beta, production)'
        required: false
        type: string
        default: 'beta'
      
      platforms:
        description: 'Platforms to deploy (ios, android, all)'
        required: false
        type: string
        default: 'all'
      
      flutter_version:
        description: 'Flutter version to use'
        required: false
        type: string
        default: 'stable'
      
      ios_scheme:
        description: 'iOS scheme name'
        required: false
        type: string
        default: 'Runner'
      
      android_build_type:
        description: 'Android build type (appbundle, apk)'
        required: false
        type: string
        default: 'appbundle'
      
      rollout_percentage:
        description: 'Android rollout percentage (1-100)'
        required: false
        type: number
        default: 100
      
      enable_cache:
        description: 'Enable build caching'
        required: false
        type: boolean
        default: true
      
      enable_notifications:
        description: 'Enable deployment notifications'
        required: false
        type: boolean
        default: true
      
      run_tests:
        description: 'Run tests before deployment'
        required: false
        type: boolean
        default: true
      
      working_directory:
        description: 'Working directory for the Flutter project'
        required: false
        type: string
        default: '.'

    secrets:
      # iOS secrets
      APP_STORE_KEY_ID:
        description: 'App Store Connect API Key ID'
        required: false
      APP_STORE_ISSUER_ID:
        description: 'App Store Connect API Issuer ID'
        required: false
      APP_STORE_KEY_CONTENT:
        description: 'App Store Connect API Key content (base64)'
        required: false
      
      # iOS Match secrets (optional)
      MATCH_PASSWORD:
        description: 'Fastlane Match password'
        required: false
      MATCH_GIT_URL:
        description: 'Fastlane Match git repository URL'
        required: false
      
      # iOS Manual certificate secrets (optional)
      IOS_DIST_CERT_BASE64:
        description: 'iOS Distribution Certificate (base64)'
        required: false
      IOS_CERT_PASSWORD:
        description: 'iOS Certificate password'
        required: false
      IOS_PROVISIONING_PROFILE_BASE64:
        description: 'iOS Provisioning Profile (base64)'
        required: false
      
      # Android secrets
      ANDROID_KEYSTORE_BASE64:
        description: 'Android keystore file (base64)'
        required: false
      KEYSTORE_PASSWORD:
        description: 'Android keystore password'
        required: false
      KEY_ALIAS:
        description: 'Android key alias'
        required: false
      KEY_PASSWORD:
        description: 'Android key password'
        required: false
      
      # Google Play secrets
      PLAY_STORE_JSON_BASE64:
        description: 'Google Play service account JSON (base64)'
        required: false
      PLAY_STORE_JSON_KEY_DATA:
        description: 'Google Play service account JSON content'
        required: false
      
      # Notification secrets (optional)
      SLACK_WEBHOOK_URL:
        description: 'Slack webhook URL for notifications'
        required: false
      DISCORD_WEBHOOK_URL:
        description: 'Discord webhook URL for notifications'
        required: false

    outputs:
      ios_deployed:
        description: 'Whether iOS app was deployed'
        value: ${{ jobs.deploy.outputs.ios_deployed }}
      android_deployed:
        description: 'Whether Android app was deployed'
        value: ${{ jobs.deploy.outputs.android_deployed }}
      deployment_url:
        description: 'URL to view deployment results'
        value: ${{ jobs.deploy.outputs.deployment_url }}

jobs:
  # Validation job
  validate:
    name: 'Validate Deployment'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate inputs
        run: |
          echo "üîç Validating deployment configuration..."
          
          # Validate environment
          if [[ ! "${{ inputs.environment }}" =~ ^(beta|production)$ ]]; then
            echo "‚ùå Invalid environment: ${{ inputs.environment }}"
            exit 1
          fi
          
          # Validate platforms
          if [[ ! "${{ inputs.platforms }}" =~ ^(ios|android|all)$ ]]; then
            echo "‚ùå Invalid platforms: ${{ inputs.platforms }}"
            exit 1
          fi
          
          # Check if we have required secrets for selected platforms
          if [[ "${{ inputs.platforms }}" == "ios" || "${{ inputs.platforms }}" == "all" ]]; then
            if [[ -z "${{ secrets.APP_STORE_KEY_ID }}" || -z "${{ secrets.APP_STORE_ISSUER_ID }}" || -z "${{ secrets.APP_STORE_KEY_CONTENT }}" ]]; then
              echo "‚ùå Missing iOS deployment secrets"
              exit 1
            fi
          fi
          
          if [[ "${{ inputs.platforms }}" == "android" || "${{ inputs.platforms }}" == "all" ]]; then
            if [[ -z "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" || -z "${{ secrets.KEYSTORE_PASSWORD }}" ]]; then
              echo "‚ùå Missing Android deployment secrets"
              exit 1
            fi
          fi
          
          echo "‚úÖ Validation completed successfully"
          
          # Print deployment summary
          echo "üìã Deployment Configuration:"
          echo "  App: ${{ inputs.app_name }}"
          echo "  Environment: ${{ inputs.environment }}"
          echo "  Platforms: ${{ inputs.platforms }}"
          echo "  Flutter: ${{ inputs.flutter_version }}"
          echo "  Tests: ${{ inputs.run_tests }}"
          echo "  Cache: ${{ inputs.enable_cache }}"

  # Test job (optional)
  test:
    name: 'Test Application'
    if: inputs.run_tests
    needs: validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Flutter environment
        uses: sangnguyen-it/App-Auto-Deployment-kit/github-actions/actions/flutter-setup@main
        with:
          flutter_version: ${{ inputs.flutter_version }}
          cache_enabled: ${{ inputs.enable_cache }}
          setup_android: 'false'
          setup_ios: 'false'
      
      - name: Run tests
        run: |
          echo "üß™ Running Flutter tests..."
          flutter test --coverage --reporter=expanded
      
      - name: Upload coverage to Codecov
        if: env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          files: coverage/lcov.info
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Main deployment job
  deploy:
    name: 'Deploy to ${{ inputs.environment }}'
    needs: [validate]
    if: ${{ !failure() && !cancelled() }}
    
    strategy:
      matrix:
        include:
          - platform: 'ios'
            runner: 'macos-latest'
            condition: ${{ inputs.platforms == 'ios' || inputs.platforms == 'all' }}
          - platform: 'android'
            runner: 'ubuntu-latest'
            condition: ${{ inputs.platforms == 'android' || inputs.platforms == 'all' }}
    
    runs-on: ${{ matrix.runner }}
    if: matrix.condition
    
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    
    outputs:
      ios_deployed: ${{ steps.deploy.outputs.ios_deployed }}
      android_deployed: ${{ steps.deploy.outputs.android_deployed }}
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Flutter environment
        uses: sangnguyen-it/App-Auto-Deployment-kit/github-actions/actions/flutter-setup@main
        with:
          flutter_version: ${{ inputs.flutter_version }}
          cache_enabled: ${{ inputs.enable_cache }}
          setup_android: ${{ matrix.platform == 'android' || inputs.platforms == 'all' }}
          setup_ios: ${{ matrix.platform == 'ios' && runner.os == 'macOS' }}
      
      - name: Deploy applications
        id: deploy
        uses: sangnguyen-it/App-Auto-Deployment-kit/github-actions/actions/deploy-apps@main
        with:
          app_name: ${{ inputs.app_name }}
          environment: ${{ inputs.environment }}
          platforms: ${{ matrix.platform }}
          ios_scheme: ${{ inputs.ios_scheme }}
          android_build_type: ${{ inputs.android_build_type }}
          rollout_percentage: ${{ inputs.rollout_percentage }}
          enable_notifications: ${{ inputs.enable_notifications }}
        env:
          # iOS environment variables
          APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
          APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
          APP_STORE_KEY_CONTENT: ${{ secrets.APP_STORE_KEY_CONTENT }}
          
          # iOS Match (optional)
          USE_FASTLANE_MATCH: ${{ secrets.MATCH_PASSWORD != '' }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          
          # iOS Manual certificates (optional)
          IOS_DIST_CERT_BASE64: ${{ secrets.IOS_DIST_CERT_BASE64 }}
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          
          # Android environment variables
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          
          # Google Play environment variables
          PLAY_STORE_JSON_BASE64: ${{ secrets.PLAY_STORE_JSON_BASE64 }}
          PLAY_STORE_JSON_KEY_DATA: ${{ secrets.PLAY_STORE_JSON_KEY_DATA }}
          
          # Notification environment variables
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # Summary job
  summary:
    name: 'Deployment Summary'
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate final summary
        run: |
          echo "## üöÄ Final Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**App:** ${{ inputs.app_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi

