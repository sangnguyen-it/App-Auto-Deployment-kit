name: 'Flutter App Auto Deploy'
# Template GitHub Actions workflow for Flutter app deployment
# Copy this file to .github/workflows/deploy.yml in your project

on:
  push:
    tags: 
      - 'v*'
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - production
      platforms:
        description: 'Platforms to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - ios
          - android
          - all
      rollout_percentage:
        description: 'Android rollout percentage (1-100)'
        required: false
        default: '100'
        type: string

jobs:
  deploy:
    name: 'Deploy Flutter App'
    uses: sangnguyen-it/App-Auto-Deployment-kit/.github/workflows/flutter-deploy.yml@main
    
    with:
      app_name: 'YOUR_APP_NAME' # Replace with your app name
      environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (contains(github.ref, 'beta') && 'beta' || 'production') }}
      platforms: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.platforms || 'all' }}
      flutter_version: 'stable'
      ios_scheme: 'Runner'
      android_build_type: 'appbundle'
      rollout_percentage: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.rollout_percentage || 100 }}
      enable_cache: true
      enable_notifications: true
      run_tests: true
      working_directory: '.'
    
    secrets:
      # iOS Secrets (required for iOS deployment)
      APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
      APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
      APP_STORE_KEY_CONTENT: ${{ secrets.APP_STORE_KEY_CONTENT }}
      
      # iOS Match (optional - if using Fastlane Match)
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      
      # iOS Manual certificates (optional - if not using Match)
      IOS_DIST_CERT_BASE64: ${{ secrets.IOS_DIST_CERT_BASE64 }}
      IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
      IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
      
      # Android Secrets (required for Android deployment)
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      
      # Google Play Secrets (required for Android deployment)
      PLAY_STORE_JSON_BASE64: ${{ secrets.PLAY_STORE_JSON_BASE64 }}
      PLAY_STORE_JSON_KEY_DATA: ${{ secrets.PLAY_STORE_JSON_KEY_DATA }}
      
      # Notification Secrets (optional)
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      
      # Testing Secrets (optional)
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

# Configuration Notes:
# 1. Replace 'YOUR_APP_NAME' with your actual app name
# 2. Configure all required secrets in GitHub repository settings
# 3. For manual deployment, use workflow_dispatch trigger
# 4. For automatic deployment, push git tags (v1.0.0, v2.0.0-beta, etc.)
# 5. Beta deployments: tags containing 'beta' (e.g., v1.0.0-beta)
# 6. Production deployments: regular version tags (e.g., v1.0.0)

# Required GitHub Secrets:
# iOS (if deploying iOS):
# - APP_STORE_KEY_ID: App Store Connect API Key ID
# - APP_STORE_ISSUER_ID: App Store Connect API Issuer ID  
# - APP_STORE_KEY_CONTENT: App Store Connect API Key content (base64)
#
# Android (if deploying Android):
# - ANDROID_KEYSTORE_BASE64: Android keystore file (base64 encoded)
# - KEYSTORE_PASSWORD: Android keystore password
# - KEY_ALIAS: Android key alias
# - PLAY_STORE_JSON_BASE64: Google Play service account JSON (base64)
#
# Optional:
# - SLACK_WEBHOOK_URL: For Slack notifications
# - DISCORD_WEBHOOK_URL: For Discord notifications
# - CODECOV_TOKEN: For test coverage reporting
