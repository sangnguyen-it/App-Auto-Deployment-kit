# {{PROJECT_NAME}} - Automated Build & Deployment Makefile
# Generated by AppAutoDeploy - Flutter CI/CD Automation Tool
# Version: 2.0.0 | Enhanced with comprehensive build pipelines

# ═══════════════════════════════════════════════════════════════════════════════
# 📋 PROJECT CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

# Project Information
PROJECT_NAME := {{PROJECT_NAME}}
APP_NAME := {{PROJECT_NAME}}
FLUTTER_VERSION := {{FLUTTER_VERSION}}
PACKAGE_NAME := {{PACKAGE_NAME}}

# Version Configuration
VERSION_FULL := {{VERSION_FULL}}
VERSION_NAME := {{VERSION_NAME}}
VERSION_CODE := {{VERSION_CODE}}

# Output Configuration
OUTPUT_DIR := builder
APK_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE).apk
AAB_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE).aab
IPA_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE).ipa
IPA_PROD_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE)-production.ipa
ARCHIVE_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE).xcarchive
ARCHIVE_PROD_NAME := $(PROJECT_NAME)-$(VERSION_NAME)-$(VERSION_CODE)-production.xcarchive

# ═══════════════════════════════════════════════════════════════════════════════
# 🎨 ENHANCED COLORS & STYLES
# ═══════════════════════════════════════════════════════════════════════════════

# Colors
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
WHITE := \033[0;37m
GRAY := \033[0;90m
NC := \033[0m

# Styles
BOLD := \033[1m
DIM := \033[2m
UNDERLINE := \033[4m

# ═══════════════════════════════════════════════════════════════════════════════
# 🎯 EMOJI & ICONS
# ═══════════════════════════════════════════════════════════════════════════════

# Status Icons
CHECK := ✅
CROSS := ❌
WARNING := ⚠️
INFO := ℹ️
GEAR := ⚙️
ROCKET := 🚀
PACKAGE := 📦
PHONE := 📱
COMPUTER := 💻
SPARKLES := ✨
MAGNIFY := 🔍
CLEAN := 🧹
STAR := ⭐
SHIELD := 🛡️
WRENCH := 🔧

# ═══════════════════════════════════════════════════════════════════════════════
# 🖨️ PRINT FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

define print_header
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(1) $(WHITE)$(2)$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
endef

# ═══════════════════════════════════════════════════════════════════════════════
# 🎯 DEFAULT TARGET & MENU
# ═══════════════════════════════════════════════════════════════════════════════

.DEFAULT_GOAL := menu

menu: ## 🎯 Interactive Menu - Choose Your Build Pipeline
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(PHONE) $(WHITE)$(PROJECT_NAME) - Automated Build Pipelines$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🚀 Automated Build Pipelines:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Running Tests"
	@flutter test
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Test suite completed"
	@printf "\n"

# ═══════════════════════════════════════════════════════════════════════════════
# ⚙️ MANUAL OPERATIONS & ADVANCED TOOLS
# ═══════════════════════════════════════════════════════════════════════════════

manual-operations: ## ⚙️ Manual Operations & Advanced Tools Menu
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(WRENCH) $(WHITE)Manual Operations & Advanced Tools$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🔧 Build Management:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  1)$(NC) $(WHITE)📦 Build Management Menu$(NC)    $(GRAY)# APK, AAB, iOS builds$(NC)\n"
	@printf "$(CYAN)  2)$(NC) $(WHITE)🔢 Version Management Menu$(NC)  $(GRAY)# Version sync, bump, validate$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🚀 Deployment & CI/CD:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  3)$(NC) $(WHITE)🚀 Trigger GitHub Actions$(NC)   $(GRAY)# Manual CI/CD trigger$(NC)\n"
	@printf "$(CYAN)  4)$(NC) $(WHITE)🔍 System Check$(NC)            $(GRAY)# Environment verification$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🛠️ Maintenance:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  5)$(NC) $(WHITE)📦 Install Dependencies$(NC)     $(GRAY)# Flutter, Ruby, iOS pods$(NC)\n"
	@printf "$(CYAN)  6)$(NC) $(WHITE)🧹 Clean Project$(NC)           $(GRAY)# Remove build artifacts$(NC)\n"
	@printf "$(CYAN)  7)$(NC) $(WHITE)🔬 Run Tests$(NC)               $(GRAY)# Execute test suite$(NC)\n"
	@printf "$(CYAN)  8)$(NC) $(WHITE)🏠 Back to Main Menu$(NC)       $(GRAY)# Return to main menu$(NC)\n"
	@printf "\n"
	@printf "$(GRAY)─────────────────────────────────────────────────────────────────$(NC)\n"
	@printf "$(WHITE)Enter your choice [1-8]:$(NC) "
	@read -p "" CHOICE; \
	case $$CHOICE in \
		1) $(MAKE) build-management-menu ;; \
		2) $(MAKE) version-management-menu ;; \
		3) $(MAKE) trigger-github-actions ;; \
		4) $(MAKE) system-check ;; \
		5) $(MAKE) deps ;; \
		6) $(MAKE) clean ;; \
		7) $(MAKE) test ;; \
		8) $(MAKE) menu ;; \
		*) printf "$(RED)Invalid choice. Please select 1-8.$(NC)\n" && $(MAKE) manual-operations ;; \
	esac

build-management-menu: ## 📦 Build Management Menu
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(PACKAGE) $(WHITE)Build Management Menu$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)📱 Android Builds:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  1)$(NC) $(WHITE)📦 Build Android APK$(NC)        $(GRAY)# Release APK for testing$(NC)\n"
	@printf "$(CYAN)  2)$(NC) $(WHITE)📦 Build Android AAB$(NC)        $(GRAY)# App Bundle for Play Store$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🍎 iOS Builds:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  3)$(NC) $(WHITE)🍎 Build iOS$(NC)               $(GRAY)# iOS build (macOS only)$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🔙 Navigation:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  4)$(NC) $(WHITE)🔙 Back to Manual Operations$(NC) $(GRAY)# Return to previous menu$(NC)\n"
	@printf "$(CYAN)  5)$(NC) $(WHITE)🏠 Main Menu$(NC)               $(GRAY)# Return to main menu$(NC)\n"
	@printf "\n"
	@printf "$(GRAY)─────────────────────────────────────────────────────────────────$(NC)\n"
	@printf "$(WHITE)Enter your choice [1-5]:$(NC) "
	@read -p "" CHOICE; \
	case $$CHOICE in \
		1) $(MAKE) build-android-apk ;; \
		2) $(MAKE) build-android-aab ;; \
		3) $(MAKE) build-ios ;; \
		4) $(MAKE) manual-operations ;; \
		5) $(MAKE) menu ;; \
		*) printf "$(RED)Invalid choice. Please select 1-5.$(NC)\n" && $(MAKE) build-management-menu ;; \
	esac

version-management-menu: ## 🔢 Version Management Menu
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(SPARKLES) $(WHITE)Version Management Menu$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)📊 Version Information:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  1)$(NC) $(WHITE)📊 Show Current Versions$(NC)    $(GRAY)# Display all platform versions$(NC)\n"
	@printf "$(CYAN)  2)$(NC) $(WHITE)🔄 Sync Versions$(NC)           $(GRAY)# Synchronize across platforms$(NC)\n"
	@printf "$(CYAN)  3)$(NC) $(WHITE)✅ Validate Versions$(NC)        $(GRAY)# Check against store versions$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)⬆️ Version Updates:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  4)$(NC) $(WHITE)⬆️ Bump Version$(NC)            $(GRAY)# Increment version numbers$(NC)\n"
	@printf "$(CYAN)  5)$(NC) $(WHITE)🏷️ Generate Tag$(NC)            $(GRAY)# Create deployment tag$(NC)\n"
	@printf "$(CYAN)  6)$(NC) $(WHITE)🔧 Auto-fix Conflicts$(NC)      $(GRAY)# Resolve version conflicts$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🔙 Navigation:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  7)$(NC) $(WHITE)🔙 Back to Manual Operations$(NC) $(GRAY)# Return to previous menu$(NC)\n"
	@printf "$(CYAN)  8)$(NC) $(WHITE)🏠 Main Menu$(NC)               $(GRAY)# Return to main menu$(NC)\n"
	@printf "\n"
	@printf "$(GRAY)─────────────────────────────────────────────────────────────────$(NC)\n"
	@printf "$(WHITE)Enter your choice [1-8]:$(NC) "
	@read -p "" CHOICE; \
	case $$CHOICE in \
		1) $(MAKE) version-show ;; \
		2) $(MAKE) version-sync ;; \
		3) $(MAKE) version-validate ;; \
		4) $(MAKE) version-bump ;; \
		5) $(MAKE) version-tag ;; \
		6) $(MAKE) version-autofix ;; \
		7) $(MAKE) manual-operations ;; \
		8) $(MAKE) menu ;; \
		*) printf "$(RED)Invalid choice. Please select 1-8.$(NC)\n" && $(MAKE) version-management-menu ;; \
	esac

version-show: ## 📊 Show current versions across all platforms
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(SPARKLES) $(WHITE)Current Version Information$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@if command -v dart >/dev/null 2>&1; then \
		dart scripts/version_manager.dart show 2>/dev/null || printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Version manager script not available"; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Dart not found - showing basic version info"; \
		printf "$(WHITE)Current Version:$(NC) $(CYAN)$(VERSION_FULL)$(NC)\n"; \
	fi

version-sync: ## 🔄 Synchronize versions across platforms
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(GEAR) $(WHITE)Version Synchronization$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(YELLOW)$(WARNING) %s$(NC)\n" "This will synchronize versions across all platforms"
	@printf "$(WHITE)Continue? [y/N]:$(NC) "
	@read -p "" CONFIRM; \
	if [ "$$CONFIRM" = "y" ] || [ "$$CONFIRM" = "Y" ]; then \
		if command -v dart >/dev/null 2>&1; then \
			dart scripts/version_sync.dart 2>/dev/null || printf "$(RED)$(CROSS) %s$(NC)\n" "Version sync failed"; \
		else \
			printf "$(RED)$(CROSS) %s$(NC)\n" "Dart not found - cannot sync versions"; \
		fi; \
	else \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Version sync cancelled"; \
	fi

version-validate: ## ✅ Validate versions against store versions
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(SHIELD) $(WHITE)Version Validation$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@if command -v dart >/dev/null 2>&1; then \
		dart scripts/version_manager.dart validate 2>/dev/null || printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Version validation script not available"; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Dart not found - cannot validate versions"; \
	fi

version-bump: ## ⬆️ Bump version numbers (major, minor, patch, build)
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(SPARKLES) $(WHITE)Version Bump Options$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)Select bump type:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  1)$(NC) $(WHITE)Major$(NC)     $(GRAY)# 1.0.0 → 2.0.0$(NC)\n"
	@printf "$(CYAN)  2)$(NC) $(WHITE)Minor$(NC)     $(GRAY)# 1.0.0 → 1.1.0$(NC)\n"
	@printf "$(CYAN)  3)$(NC) $(WHITE)Patch$(NC)     $(GRAY)# 1.0.0 → 1.0.1$(NC)\n"
	@printf "$(CYAN)  4)$(NC) $(WHITE)Build$(NC)     $(GRAY)# 1.0.0+1 → 1.0.0+2$(NC)\n"
	@printf "$(CYAN)  5)$(NC) $(WHITE)Auto$(NC)      $(GRAY)# Smart bump based on store$(NC)\n"
	@printf "\n"
	@printf "$(WHITE)Enter your choice [1-5]:$(NC) "
	@read -p "" CHOICE; \
	case $$CHOICE in \
		1) BUMP_TYPE="major" ;; \
		2) BUMP_TYPE="minor" ;; \
		3) BUMP_TYPE="patch" ;; \
		4) BUMP_TYPE="build" ;; \
		5) BUMP_TYPE="auto" ;; \
		*) printf "$(RED)Invalid choice$(NC)\n" && exit 1 ;; \
	esac; \
	if command -v dart >/dev/null 2>&1; then \
		dart scripts/version_manager.dart bump $$BUMP_TYPE 2>/dev/null || printf "$(RED)$(CROSS) %s$(NC)\n" "Version bump failed"; \
	else \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Dart not found - cannot bump version"; \
	fi

version-tag: ## 🏷️ Generate deployment tag
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(STAR) $(WHITE)Generate Deployment Tag$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@if command -v dart >/dev/null 2>&1; then \
		dart scripts/tag_generator.dart 2>/dev/null || printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Tag generator script not available"; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Dart not found - cannot generate tag"; \
	fi

version-autofix: ## 🔧 Auto-fix version conflicts
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(WRENCH) $(WHITE)Auto-fix Version Conflicts$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(YELLOW)$(WARNING) %s$(NC)\n" "This will automatically fix version conflicts"
	@printf "$(WHITE)Continue? [y/N]:$(NC) "
	@read -p "" CONFIRM; \
	if [ "$$CONFIRM" = "y" ] || [ "$$CONFIRM" = "Y" ]; then \
		if command -v dart >/dev/null 2>&1; then \
			dart scripts/version_manager.dart autofix 2>/dev/null || printf "$(RED)$(CROSS) %s$(NC)\n" "Auto-fix failed"; \
		else \
			printf "$(RED)$(CROSS) %s$(NC)\n" "Dart not found - cannot auto-fix"; \
		fi; \
	else \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Auto-fix cancelled"; \
	fi

# ═══════════════════════════════════════════════════════════════════════════════
# 🔨 INDIVIDUAL BUILD TARGETS
# ═══════════════════════════════════════════════════════════════════════════════

build-android-apk: ## 📦 Build Android APK
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(PACKAGE) $(WHITE)Building Android APK$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building Android APK..."
	@flutter clean && flutter pub get
	@flutter build apk --release
	@if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then \
		APK_SIZE=$$(du -h "build/app/outputs/flutter-apk/app-release.apk" | awk '{print $$1}'); \
		printf "$(GREEN)$(CHECK) %s (Size: $$APK_SIZE)$(NC)\n" "Android APK built successfully"; \
		printf "$(WHITE)  Location:$(NC) build/app/outputs/flutter-apk/app-release.apk\n"; \
		mkdir -p $(OUTPUT_DIR); \
		cp "build/app/outputs/flutter-apk/app-release.apk" "$(OUTPUT_DIR)/$(APK_NAME)"; \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "APK copied to $(OUTPUT_DIR)/$(APK_NAME)"; \
	else \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Android APK build failed"; \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Check Flutter installation and project configuration"; \
		exit 1; \
	fi

build-android-aab: ## 📦 Build Android App Bundle (AAB)
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(PACKAGE) $(WHITE)Building Android App Bundle$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building Android AAB..."
	@flutter clean && flutter pub get
	@flutter build appbundle --release
	@if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then \
		AAB_SIZE=$$(du -h "build/app/outputs/bundle/release/app-release.aab" | awk '{print $$1}'); \
		printf "$(GREEN)$(CHECK) %s (Size: $$AAB_SIZE)$(NC)\n" "Android AAB built successfully"; \
		printf "$(WHITE)  Location:$(NC) build/app/outputs/bundle/release/app-release.aab\n"; \
		mkdir -p $(OUTPUT_DIR); \
		cp "build/app/outputs/bundle/release/app-release.aab" "$(OUTPUT_DIR)/$(AAB_NAME)"; \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "AAB copied to $(OUTPUT_DIR)/$(AAB_NAME)"; \
	else \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Android AAB build failed"; \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Check Flutter installation and project configuration"; \
		exit 1; \
	fi

build-ios: ## 🍎 Build iOS application (macOS only)
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(PHONE) $(WHITE)Building iOS Application$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@if [ "$$(uname)" != "Darwin" ]; then \
		printf "$(RED)$(CROSS) %s$(NC)\n" "iOS builds require macOS"; \
		exit 1; \
	fi
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building iOS..."
	@flutter clean && flutter pub get
	@flutter build ios --release
	@if [ $$? -eq 0 ]; then \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS build completed successfully"; \
		printf "$(WHITE)  Location:$(NC) build/ios/iphoneos/Runner.app\n"; \
	else \
		printf "$(RED)$(CROSS) %s$(NC)\n" "iOS build failed"; \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Check Xcode installation and iOS project configuration"; \
		exit 1; \
	fi

# ═══════════════════════════════════════════════════════════════════════════════
# 📚 HELP & DOCUMENTATION
# ═══════════════════════════════════════════════════════════════════════════════

help: ## 📋 Show detailed help and available commands
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(STAR) $(WHITE)$(PROJECT_NAME) - Available Commands$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🚀 Automated Pipelines:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  make tester$(NC)              $(GRAY)# 🧪 Build APK + TestFlight for testing$(NC)\n"
	@printf "$(CYAN)  make live$(NC)                $(GRAY)# 🚀 Full production pipeline (hybrid)$(NC)\n"
	@printf "$(CYAN)  make live-local$(NC)          $(GRAY)# 🚀 Local build + upload to stores$(NC)\n"
	@printf "$(CYAN)  make live-github$(NC)         $(GRAY)# ☁️ GitHub Actions deployment only$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)⚙️ Manual Operations:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  make manual-operations$(NC)   $(GRAY)# ⚙️ Advanced tools & configurations$(NC)\n"
	@printf "$(CYAN)  make trigger-github-actions$(NC) $(GRAY)# 🚀 Trigger CI/CD manually$(NC)\n"
	@printf "$(CYAN)  make system-check$(NC)        $(GRAY)# 🔍 Verify environment setup$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)🔨 Direct Commands:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  make build-android-apk$(NC)   $(GRAY)# 📦 Build Android APK$(NC)\n"
	@printf "$(CYAN)  make build-android-aab$(NC)   $(GRAY)# 📦 Build Android App Bundle$(NC)\n"
	@printf "$(CYAN)  make build-ios$(NC)           $(GRAY)# 🍎 Build iOS (macOS only)$(NC)\n"
	@printf "$(CYAN)  make deps$(NC)                $(GRAY)# 📦 Install all dependencies$(NC)\n"
	@printf "$(CYAN)  make clean$(NC)               $(GRAY)# 🧹 Clean build artifacts$(NC)\n"
	@printf "$(CYAN)  make test$(NC)                $(GRAY)# 🔬 Run test suite$(NC)\n"
	@printf "$(CYAN)  make setup$(NC)               $(GRAY)# ⚙️ Setup development environment$(NC)\n"
	@printf "$(CYAN)  make doctor$(NC)              $(GRAY)# 🔍 Run health checks$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)📊 Version Management:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  make version-show$(NC)        $(GRAY)# 📊 Show current versions$(NC)\n"
	@printf "$(CYAN)  make version-sync$(NC)        $(GRAY)# 🔄 Sync versions across platforms$(NC)\n"
	@printf "$(CYAN)  make version-bump$(NC)        $(GRAY)# ⬆️ Bump version numbers$(NC)\n"
	@printf "$(CYAN)  make version-validate$(NC)    $(GRAY)# ✅ Validate against store versions$(NC)\n"
	@printf "\n"
	@printf "$(GRAY)─────────────────────────────────────────────────────────────────$(NC)\n"
	@printf "$(WHITE)💡 Tip:$(NC) Run $(CYAN)make$(NC) or $(CYAN)make menu$(NC) for interactive menu\n"
	@printf "$(WHITE)📚 Docs:$(NC) Check docs/ directory for detailed setup guides\n"
	@printf "\n"

.PHONY: menu tester live live-local live-github auto-build-tester auto-build-live auto-build-live-local auto-build-live-github trigger-github-actions system-check system-tester deps setup doctor clean build test manual-operations build-management-menu version-management-menu version-show version-sync version-validate version-bump version-tag version-autofix build-android-apk build-android-aab build-ios help

# ═══════════════════════════════════════════════════════════════════════════════
# 📝 MAKEFILE METADATA
# ═══════════════════════════════════════════════════════════════════════════════
# Generated by: AppAutoDeploy v2.0.0
# Template: makefile.template
# Project: {{PROJECT_NAME}}
# Generated: $(shell date)
# ═══════════════════════════════════════════════════════════════════════════════  1)$(NC) $(WHITE)🧪 Tester Pipeline$(NC)         $(GRAY)# APK + TestFlight for testing$(NC)\n"
	@printf "$(CYAN)  2)$(NC) $(WHITE)🚀 Live Local Pipeline$(NC)     $(GRAY)# AAB + App Store (Local upload)$(NC)\n"
	@printf "$(CYAN)  3)$(NC) $(WHITE)☁️  Live GitHub Pipeline$(NC)    $(GRAY)# GitHub Actions deployment$(NC)\n"
	@printf "$(CYAN)  4)$(NC) $(WHITE)🔄 Live Hybrid Pipeline$(NC)    $(GRAY)# Local build + GitHub upload$(NC)\n"
	@printf "\n"
	@printf "$(PURPLE)$(BOLD)⚙️ Advanced Options:$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)  5)$(NC) $(WHITE)⚙️  Manual Operations$(NC)       $(GRAY)# Advanced tools & configurations$(NC)\n"
	@printf "$(CYAN)  6)$(NC) $(WHITE)🔍 System Check$(NC)            $(GRAY)# Verify environment setup$(NC)\n"
	@printf "$(CYAN)  7)$(NC) $(WHITE)📋 Help & Commands$(NC)         $(GRAY)# Show all available commands$(NC)\n"
	@printf "$(CYAN)  8)$(NC) $(WHITE)🚪 Exit$(NC)                   $(GRAY)# Close this menu$(NC)\n"
	@printf "\n"
	@printf "$(GRAY)─────────────────────────────────────────────────────────────────$(NC)\n"
	@printf "$(WHITE)Enter your choice [1-8]:$(NC) "
	@read -p "" CHOICE; \
	case $$CHOICE in \
		1) $(MAKE) auto-build-tester ;; \
		2) $(MAKE) auto-build-live-local ;; \
		3) $(MAKE) auto-build-live-github ;; \
		4) $(MAKE) auto-build-live ;; \
		5) $(MAKE) manual-operations ;; \
		6) $(MAKE) system-check ;; \
		7) $(MAKE) help ;; \
		8) printf "$(GREEN)$(CHECK) %s$(NC)\n" "Goodbye! 👋" ;; \
		*) printf "$(RED)Invalid choice. Please select 1-8.$(NC)\n" && $(MAKE) menu ;; \
	esac

# ═══════════════════════════════════════════════════════════════════════════════
# 🧪 TESTER PIPELINE - APK + TESTFLIGHT
# ═══════════════════════════════════════════════════════════════════════════════

tester: auto-build-tester ## 🧪 Alias for auto-build-tester

auto-build-tester: ## 🧪 Automated Tester Pipeline (APK + TestFlight)
	@printf "\n"
	@printf "$(CYAN)🧪 Building for Testing$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Checking dependencies..."
	@if command -v ruby >/dev/null 2>&1 && command -v gem >/dev/null 2>&1; then \
		if ! command -v bundle >/dev/null 2>&1; then \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundler not found. Installing..."; \
			if gem install bundler 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Bundler installed successfully"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundler install failed - continuing without gems"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual fix: gem install bundler"; \
			fi; \
		fi; \
		if [ -f "Gemfile" ] && command -v bundle >/dev/null 2>&1; then \
			printf "$(CYAN)$(GEAR) %s$(NC)\n" "Installing Ruby gems..."; \
			if bundle install 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Ruby gems installed"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundle install failed - continuing without gems"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual fix: bundle install"; \
			fi; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Ruby/Gems not found - skipping gem dependencies"; \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Install Ruby if you need Fastlane functionality"; \
	fi
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Starting system configuration check..."
	@$(MAKE) system-check
	@if [ $$? -ne 0 ]; then \
		printf "$(RED)$(CROSS) %s$(NC)\n" "System configuration failed! Please fix issues above."; \
		exit 1; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Creating Builder Directory"
	@mkdir -p $(OUTPUT_DIR)
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Builder directory ready"
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Generating build information..."
	@if command -v dart >/dev/null 2>&1; then \
		if dart scripts/build_info_generator.dart 2>/dev/null; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "Build information generated"; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Build info generation failed - continuing"; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Dart not found - skipping build info generation"; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building Android APK for Testing"
	@flutter clean && flutter pub get
	@flutter build apk --release
	@if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then \
		APK_SIZE=$$(du -h "build/app/outputs/flutter-apk/app-release.apk" | awk '{print $$1}'); \
		printf "$(GREEN)$(CHECK) %s ($$APK_SIZE)$(NC)\n" "Android APK built successfully"; \
		cp "build/app/outputs/flutter-apk/app-release.apk" "$(OUTPUT_DIR)/$(APK_NAME)"; \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "APK copied to $(OUTPUT_DIR)/$(APK_NAME)"; \
	else \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Android APK build failed"; \
		exit 1; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building iOS for TestFlight"
	@if [ "$$(uname)" = "Darwin" ]; then \
		flutter build ios --release; \
		if [ $$? -eq 0 ]; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS build completed"; \
			mkdir -p build/ios/archive build/ios/ipa; \
			cd ios && xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -destination "generic/platform=iOS" -archivePath ../build/ios/archive/Runner.xcarchive archive; \
			if [ $$? -eq 0 ] && [ -d "../build/ios/archive/Runner.xcarchive" ]; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS Archive created successfully"; \
				cp -r "../build/ios/archive/Runner.xcarchive" "../$(OUTPUT_DIR)/$(ARCHIVE_NAME)"; \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Archive copied to $(OUTPUT_DIR)/$(ARCHIVE_NAME)"; \
				printf "$(CYAN)$(GEAR) %s$(NC)\n" "Exporting TestFlight IPA from Archive..."; \
				if [ -f "fastlane/ExportOptions.plist" ]; then \
				xcodebuild -exportArchive -archivePath ../build/ios/archive/Runner.xcarchive -exportPath ../build/ios/ipa -exportOptionsPlist fastlane/ExportOptions.plist; \
				else \
					xcodebuild -exportArchive -archivePath ../build/ios/archive/Runner.xcarchive -exportPath ../build/ios/ipa -exportOptionsPlist <(printf '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n<key>method</key>\n<string>app-store-connect</string>\n<key>uploadBitcode</key>\n<false/>\n<key>compileBitcode</key>\n<false/>\n<key>uploadSymbols</key>\n<true/>\n<key>signingStyle</key>\n<string>automatic</string>\n</dict>\n</plist>'); \
				fi; \
				IPA_FILE=$$(find ../build/ios/ipa -name "*.ipa" | head -1); \
				if [ -n "$$IPA_FILE" ] && [ -f "$$IPA_FILE" ]; then \
					printf "$(GREEN)$(CHECK) %s$(NC)\n" "TestFlight IPA exported successfully"; \
					cp "$$IPA_FILE" "../$(OUTPUT_DIR)/$(IPA_NAME)"; \
					printf "$(GREEN)$(CHECK) %s$(NC)\n" "TestFlight IPA copied to $(OUTPUT_DIR)/$(IPA_NAME)"; \
					printf "$(CYAN)$(GEAR) %s$(NC)\n" "Uploading to TestFlight..."; \
					if command -v fastlane >/dev/null 2>&1 && [ -f "fastlane/Fastfile" ]; then \
						if command -v bundle >/dev/null 2>&1 && [ -f "../Gemfile" ]; then \
							if bundle exec fastlane ios beta 2>/dev/null; then \
								printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to TestFlight via bundle"; \
							elif fastlane ios beta 2>/dev/null; then \
								printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to TestFlight"; \
							else \
								printf "$(YELLOW)$(WARNING) %s$(NC)\n" "TestFlight upload failed - check fastlane configuration"; \
								printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual upload: Use Xcode or: cd ios && bundle exec fastlane ios beta"; \
							fi; \
						elif fastlane ios beta 2>/dev/null; then \
							printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to TestFlight"; \
						else \
							printf "$(YELLOW)$(WARNING) %s$(NC)\n" "TestFlight upload failed - check fastlane configuration"; \
							printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual upload: Use Xcode or: cd ios && fastlane ios beta"; \
						fi; \
					else \
						printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Fastlane not available - manual TestFlight upload required"; \
						printf "$(CYAN)$(INFO) %s$(NC)\n" "Upload manually: Use Xcode Organizer or Transporter app"; \
						printf "$(CYAN)$(INFO) %s$(NC)\n" "IPA location: $(OUTPUT_DIR)/$(IPA_NAME)"; \
					fi; \
				else \
					printf "$(RED)$(CROSS) %s$(NC)\n" "IPA export failed"; \
				fi; \
			fi; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "iOS build skipped (requires macOS)"; \
	fi
	
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Tester build completed"
	@printf "$(GREEN)🎉 Tester Build Pipeline Completed!$(NC)\n"
	@printf "$(WHITE)📁 Builder Directory:$(NC) $(OUTPUT_DIR)/\n"
	@printf "$(WHITE)📱 Android APK:$(NC) $(OUTPUT_DIR)/$(APK_NAME)\n"
	@if [ "$$(uname)" = "Darwin" ] && [ -f "$(OUTPUT_DIR)/$(IPA_NAME)" ]; then \
		printf "$(WHITE)🍎 iOS IPA:$(NC) $(OUTPUT_DIR)/$(IPA_NAME)\n"; \
	fi

# ═══════════════════════════════════════════════════════════════════════════════
# 🚀 PRODUCTION PIPELINES
# ═══════════════════════════════════════════════════════════════════════════════

live: auto-build-live ## 🚀 Alias for auto-build-live (Hybrid)
live-local: auto-build-live-local ## 🚀 Alias for auto-build-live-local
live-github: auto-build-live-github ## ☁️ Alias for auto-build-live-github

auto-build-live: ## 🔄 Automated Live Production Pipeline (Hybrid)
	@printf "\n"
	@printf "$(CYAN)🌟 Building for Production$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Checking dependencies..."
	@if command -v ruby >/dev/null 2>&1 && command -v gem >/dev/null 2>&1; then \
		if ! command -v bundle >/dev/null 2>&1; then \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundler not found. Installing..."; \
			if gem install bundler 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Bundler installed successfully"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundler install failed - continuing without gems"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual fix: gem install bundler"; \
			fi; \
		fi; \
		if [ -f "Gemfile" ] && command -v bundle >/dev/null 2>&1; then \
			printf "$(CYAN)$(GEAR) %s$(NC)\n" "Installing Ruby gems..."; \
			if bundle install 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Ruby gems installed"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundle install failed - continuing without gems"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual fix: bundle install"; \
			fi; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Ruby/Gems not found - skipping gem dependencies"; \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Install Ruby if you need Fastlane functionality"; \
	fi
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Starting system configuration check..."
	@$(MAKE) system-check
	@if [ $$? -ne 0 ]; then \
		printf "$(RED)$(CROSS) %s$(NC)\n" "System configuration failed! Please fix issues above."; \
		exit 1; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Syncing version with store..."
	@if command -v dart >/dev/null 2>&1; then \
		if dart scripts/version_manager.dart smart-bump auto 2>/dev/null; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "Version synced with store"; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Version sync failed - continuing with current version"; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Dart not found - skipping version sync"; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Creating Builder Directory"
	@mkdir -p $(OUTPUT_DIR)
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Builder directory ready"
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Generating build information..."
	@if command -v dart >/dev/null 2>&1; then \
		if dart scripts/build_info_generator.dart 2>/dev/null; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "Build information generated"; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Build info generation failed - continuing"; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Dart not found - skipping build info generation"; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building Android AAB for Google Play Production"
	@flutter clean && flutter pub get
	@flutter build appbundle --release
	@if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then \
		AAB_SIZE=$$(du -h "build/app/outputs/bundle/release/app-release.aab" | awk '{print $$1}'); \
		printf "$(GREEN)$(CHECK) %s ($$AAB_SIZE)$(NC)\n" "Android AAB built successfully"; \
		cp "build/app/outputs/bundle/release/app-release.aab" "$(OUTPUT_DIR)/$(AAB_NAME)"; \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "AAB copied to $(OUTPUT_DIR)/$(AAB_NAME)"; \
	else \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Android AAB build failed"; \
		exit 1; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building iOS for App Store"
	@if [ "$$(uname)" = "Darwin" ]; then \
		flutter build ios --release; \
		if [ $$? -eq 0 ]; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS build completed"; \
			mkdir -p build/ios/archive build/ios/ipa; \
			cd ios && xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -destination "generic/platform=iOS" -archivePath ../build/ios/archive/Runner.xcarchive archive; \
			if [ $$? -eq 0 ] && [ -d "../build/ios/archive/Runner.xcarchive" ]; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS Archive created successfully"; \
				cp -r "../build/ios/archive/Runner.xcarchive" "../$(OUTPUT_DIR)/$(ARCHIVE_PROD_NAME)"; \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Archive copied to $(OUTPUT_DIR)/$(ARCHIVE_PROD_NAME)"; \
				printf "$(CYAN)$(GEAR) %s$(NC)\n" "Exporting Production IPA from Archive..."; \
				if [ -f "fastlane/ExportOptions.plist" ]; then \
				xcodebuild -exportArchive -archivePath ../build/ios/archive/Runner.xcarchive -exportPath ../build/ios/ipa -exportOptionsPlist fastlane/ExportOptions.plist; \
				else \
					xcodebuild -exportArchive -archivePath ../build/ios/archive/Runner.xcarchive -exportPath ../build/ios/ipa -exportOptionsPlist <(printf '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n<key>method</key>\n<string>app-store-connect</string>\n<key>uploadBitcode</key>\n<false/>\n<key>compileBitcode</key>\n<false/>\n<key>uploadSymbols</key>\n<true/>\n<key>signingStyle</key>\n<string>automatic</string>\n</dict>\n</plist>'); \
				fi; \
				IPA_FILE=$$(find ../build/ios/ipa -name "*.ipa" | head -1); \
				if [ -n "$$IPA_FILE" ] && [ -f "$$IPA_FILE" ]; then \
					printf "$(GREEN)$(CHECK) %s$(NC)\n" "Production IPA exported successfully"; \
					cp "$$IPA_FILE" "../$(OUTPUT_DIR)/$(IPA_PROD_NAME)"; \
					printf "$(GREEN)$(CHECK) %s$(NC)\n" "Production IPA copied to $(OUTPUT_DIR)/$(IPA_PROD_NAME)"; \
					printf "$(CYAN)$(GEAR) %s$(NC)\n" "Uploading to App Store..."; \
					if command -v fastlane >/dev/null 2>&1 && [ -f "fastlane/Fastfile" ]; then \
						if command -v bundle >/dev/null 2>&1 && [ -f "../Gemfile" ]; then \
							if bundle exec fastlane ios release 2>/dev/null; then \
								printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to App Store via bundle"; \
							elif fastlane ios release 2>/dev/null; then \
								printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to App Store"; \
							else \
								printf "$(YELLOW)$(WARNING) %s$(NC)\n" "App Store upload failed - check fastlane configuration"; \
								printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual upload: Use Xcode or: cd ios && bundle exec fastlane ios release"; \
							fi; \
						elif fastlane ios release 2>/dev/null; then \
							printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to App Store"; \
						else \
							printf "$(YELLOW)$(WARNING) %s$(NC)\n" "App Store upload failed - check fastlane configuration"; \
							printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual upload: Use Xcode or: cd ios && fastlane ios release"; \
						fi; \
					else \
						printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Fastlane not available - manual App Store upload required"; \
						printf "$(CYAN)$(INFO) %s$(NC)\n" "Upload manually: Use Xcode Organizer or Transporter app"; \
						printf "$(CYAN)$(INFO) %s$(NC)\n" "IPA location: $(OUTPUT_DIR)/$(IPA_PROD_NAME)"; \
					fi; \
				else \
					printf "$(RED)$(CROSS) %s$(NC)\n" "Production IPA export failed"; \
				fi; \
			fi; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "iOS build skipped (requires macOS)"; \
	fi
	
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Production build completed"
	@printf "$(GREEN)🚀 Live Production Pipeline Completed!$(NC)\n"
	@printf "$(WHITE)📁 Builder Directory:$(NC) $(OUTPUT_DIR)/\n"
	@printf "$(WHITE)📦 Android AAB:$(NC) $(OUTPUT_DIR)/$(AAB_NAME)\n"
	@if [ "$$(uname)" = "Darwin" ] && [ -f "$(OUTPUT_DIR)/$(IPA_PROD_NAME)" ]; then \
		printf "$(WHITE)🍎 iOS Production IPA:$(NC) $(OUTPUT_DIR)/$(IPA_PROD_NAME)\n"; \
	fi
	
	@printf "\n"
	@printf "$(CYAN)🚀 Triggering GitHub Actions for Store Upload...$(NC)\n"
	@$(MAKE) trigger-github-actions

auto-build-live-local: ## 🚀 Automated Live Production Pipeline (Local Only)
	@printf "\n"
	@printf "$(CYAN)🌟 Building for Production (Local Upload)$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Checking dependencies..."
	@if command -v ruby >/dev/null 2>&1 && command -v gem >/dev/null 2>&1; then \
		if ! command -v bundle >/dev/null 2>&1; then \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundler not found. Installing..."; \
			if gem install bundler 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Bundler installed successfully"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundler install failed - continuing without gems"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual fix: gem install bundler"; \
			fi; \
		fi; \
		if [ -f "Gemfile" ] && command -v bundle >/dev/null 2>&1; then \
			printf "$(CYAN)$(GEAR) %s$(NC)\n" "Installing Ruby gems..."; \
			if bundle install 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Ruby gems installed"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundle install failed - continuing without gems"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual fix: bundle install"; \
			fi; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Ruby/Gems not found - skipping gem dependencies"; \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Install Ruby if you need Fastlane functionality"; \
	fi
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Starting system configuration check..."
	@$(MAKE) system-check
	@if [ $$? -ne 0 ]; then \
		printf "$(RED)$(CROSS) %s$(NC)\n" "System configuration failed! Please fix issues above."; \
		exit 1; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Syncing version with store..."
	@if command -v dart >/dev/null 2>&1; then \
		if dart scripts/version_manager.dart smart-bump auto 2>/dev/null; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "Version synced with store"; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Version sync failed - continuing with current version"; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Dart not found - skipping version sync"; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Creating Builder Directory"
	@mkdir -p $(OUTPUT_DIR)
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Builder directory ready"
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Generating build information..."
	@if command -v dart >/dev/null 2>&1; then \
		if dart scripts/build_info_generator.dart 2>/dev/null; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "Build information generated"; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Build info generation failed - continuing"; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Dart not found - skipping build info generation"; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building Android AAB for Google Play Production"
	@flutter clean && flutter pub get
	@flutter build appbundle --release
	@if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then \
		AAB_SIZE=$$(du -h "build/app/outputs/bundle/release/app-release.aab" | awk '{print $$1}'); \
		printf "$(GREEN)$(CHECK) %s ($$AAB_SIZE)$(NC)\n" "Android AAB built successfully"; \
		cp "build/app/outputs/bundle/release/app-release.aab" "$(OUTPUT_DIR)/$(AAB_NAME)"; \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "AAB copied to $(OUTPUT_DIR)/$(AAB_NAME)"; \
		printf "$(CYAN)$(GEAR) %s$(NC)\n" "Uploading Android AAB to Google Play..."; \
		if command -v fastlane >/dev/null 2>&1 && [ -f "android/fastlane/Fastfile" ]; then \
			cd android; \
			if command -v bundle >/dev/null 2>&1 && [ -f "../Gemfile" ]; then \
				if bundle exec fastlane android release 2>/dev/null; then \
					printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to Google Play via bundle"; \
				elif fastlane android release 2>/dev/null; then \
					printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to Google Play"; \
				else \
					printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Google Play upload failed - check fastlane configuration"; \
					printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual upload: cd android && bundle exec fastlane android release"; \
				fi; \
			elif fastlane android release 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to Google Play"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Google Play upload failed - check fastlane configuration"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual upload: cd android && fastlane android release"; \
			fi; \
			cd ..; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Fastlane not available - manual Google Play upload required"; \
			printf "$(CYAN)$(INFO) %s$(NC)\n" "Upload manually: Use Google Play Console"; \
			printf "$(CYAN)$(INFO) %s$(NC)\n" "AAB location: $(OUTPUT_DIR)/$(AAB_NAME)"; \
		fi; \
	else \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Android AAB build failed"; \
		exit 1; \
	fi
	
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building iOS for App Store"
	@if [ "$$(uname)" = "Darwin" ]; then \
		flutter build ios --release; \
		if [ $$? -eq 0 ]; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS build completed"; \
			mkdir -p build/ios/archive build/ios/ipa; \
			cd ios && xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -destination "generic/platform=iOS" -archivePath ../build/ios/archive/Runner.xcarchive archive; \
			if [ $$? -eq 0 ] && [ -d "../build/ios/archive/Runner.xcarchive" ]; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS Archive created successfully"; \
				cp -r "../build/ios/archive/Runner.xcarchive" "../$(OUTPUT_DIR)/$(ARCHIVE_PROD_NAME)"; \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Archive copied to $(OUTPUT_DIR)/$(ARCHIVE_PROD_NAME)"; \
				printf "$(CYAN)$(GEAR) %s$(NC)\n" "Exporting Production IPA from Archive..."; \
				if [ -f "fastlane/ExportOptions.plist" ]; then \
				xcodebuild -exportArchive -archivePath ../build/ios/archive/Runner.xcarchive -exportPath ../build/ios/ipa -exportOptionsPlist fastlane/ExportOptions.plist; \
				else \
					xcodebuild -exportArchive -archivePath ../build/ios/archive/Runner.xcarchive -exportPath ../build/ios/ipa -exportOptionsPlist <(printf '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n<key>method</key>\n<string>app-store-connect</string>\n<key>uploadBitcode</key>\n<false/>\n<key>compileBitcode</key>\n<false/>\n<key>uploadSymbols</key>\n<true/>\n<key>signingStyle</key>\n<string>automatic</string>\n</dict>\n</plist>'); \
				fi; \
				IPA_FILE=$$(find ../build/ios/ipa -name "*.ipa" | head -1); \
				if [ -n "$$IPA_FILE" ] && [ -f "$$IPA_FILE" ]; then \
					printf "$(GREEN)$(CHECK) %s$(NC)\n" "Production IPA exported successfully"; \
					cp "$$IPA_FILE" "../$(OUTPUT_DIR)/$(IPA_PROD_NAME)"; \
					printf "$(GREEN)$(CHECK) %s$(NC)\n" "Production IPA copied to $(OUTPUT_DIR)/$(IPA_PROD_NAME)"; \
					printf "$(CYAN)$(GEAR) %s$(NC)\n" "Uploading to App Store..."; \
					if command -v fastlane >/dev/null 2>&1 && [ -f "fastlane/Fastfile" ]; then \
						if command -v bundle >/dev/null 2>&1 && [ -f "../Gemfile" ]; then \
							if bundle exec fastlane ios release 2>/dev/null; then \
								printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to App Store via bundle"; \
							elif fastlane ios release 2>/dev/null; then \
								printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to App Store"; \
							else \
								printf "$(YELLOW)$(WARNING) %s$(NC)\n" "App Store upload failed - check fastlane configuration"; \
								printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual upload: Use Xcode or: cd ios && bundle exec fastlane ios release"; \
							fi; \
						elif fastlane ios release 2>/dev/null; then \
							printf "$(GREEN)$(CHECK) %s$(NC)\n" "Successfully uploaded to App Store"; \
						else \
							printf "$(YELLOW)$(WARNING) %s$(NC)\n" "App Store upload failed - check fastlane configuration"; \
							printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual upload: Use Xcode or: cd ios && fastlane ios release"; \
						fi; \
					else \
						printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Fastlane not available - manual App Store upload required"; \
						printf "$(CYAN)$(INFO) %s$(NC)\n" "Upload manually: Use Xcode Organizer or Transporter app"; \
						printf "$(CYAN)$(INFO) %s$(NC)\n" "IPA location: $(OUTPUT_DIR)/$(IPA_PROD_NAME)"; \
					fi; \
				else \
					printf "$(RED)$(CROSS) %s$(NC)\n" "Production IPA export failed"; \
				fi; \
			fi; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "iOS build skipped (requires macOS)"; \
	fi
	
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Production build completed"
	@printf "$(GREEN)🚀 Live Production Pipeline (Local) Completed!$(NC)\n"
	@printf "$(WHITE)📁 Builder Directory:$(NC) $(OUTPUT_DIR)/\n"
	@printf "$(WHITE)📦 Android AAB:$(NC) $(OUTPUT_DIR)/$(AAB_NAME)\n"
	@if [ "$$(uname)" = "Darwin" ] && [ -f "$(OUTPUT_DIR)/$(IPA_PROD_NAME)" ]; then \
		printf "$(WHITE)🍎 iOS Production IPA:$(NC) $(OUTPUT_DIR)/$(IPA_PROD_NAME)\n"; \
	fi
	
	@printf "\n"
	@printf "$(CYAN)📝 Creating Git tag for version tracking...$(NC)\n"
	@VERSION=$$(grep "version:" pubspec.yaml | cut -d' ' -f2 | tr -d ' '); \
	if [ -z "$$VERSION" ]; then \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Could not extract version from pubspec.yaml"; \
		exit 1; \
	fi; \
	printf "$(CYAN)$(INFO) %s$(NC)\n" "Extracted version: $$VERSION"; \
	TAG_NAME="v$$VERSION"; \
	printf "$(CYAN)$(GEAR) %s$(NC)\n" "Creating git tag: $$TAG_NAME"; \
	if git tag -a "$$TAG_NAME" -m "Local build and upload completed - Apps already deployed via Fastlane" 2>/dev/null; then \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "Git tag created: $$TAG_NAME"; \
		printf "$(CYAN)$(GEAR) %s$(NC)\n" "Pushing git tag to remote..."; \
		if git push origin "$$TAG_NAME" 2>/dev/null; then \
			printf "$(GREEN)$(CHECK) %s$(NC)\n" "Git tag pushed successfully"; \
			printf "$(CYAN)$(INFO) %s$(NC)\n" "Apps uploaded directly via Fastlane - no GitHub Actions triggered"; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Git push failed - tag created locally only"; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Git tag already exists or failed to create"; \
	fi

auto-build-live-github: ## ☁️ Automated Live Production Pipeline (GitHub Only)
	@printf "\n"
	@printf "$(CYAN)☁️ Triggering GitHub Actions for Production Build$(NC)\n"
	@printf "\n"
	@VERSION=$$(grep "version:" pubspec.yaml | cut -d' ' -f2 | tr -d ' '); \
	if [ -z "$$VERSION" ]; then \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Could not extract version from pubspec.yaml"; \
		exit 1; \
	fi; \
	printf "$(CYAN)$(INFO) %s$(NC)\n" "Extracted version: $$VERSION"; \
	TAG_NAME="v$$VERSION"; \
	printf "$(CYAN)$(GEAR) %s$(NC)\n" "Creating git tag: $$TAG_NAME"; \
	if git tag -a "$$TAG_NAME" -m "🚀 Production release $$VERSION" 2>/dev/null; then \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "Git tag created: $$TAG_NAME"; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Git tag already exists or failed to create"; \
	fi; \
	printf "$(CYAN)$(GEAR) %s$(NC)\n" "Pushing git tag to remote..."; \
	if git push origin "$$TAG_NAME" 2>/dev/null; then \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "Git tag pushed successfully"; \
		printf "$(CYAN)$(GEAR) %s$(NC)\n" "GitHub Actions triggered by tag push"; \
		printf "$(GREEN)$(ROCKET) %s$(NC)\n" "Monitor deployment: https://github.com/$$(git remote get-url origin | sed 's/.*github.com[:/]\([^.]*\).*/\1/')/actions"; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Git push failed - trying GitHub API trigger..."; \
		if command -v gh >/dev/null 2>&1; then \
			printf "$(CYAN)$(GEAR) %s$(NC)\n" "Using GitHub CLI to trigger workflow..."; \
			if gh workflow run deploy.yml --field environment=production --field platforms=all 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "GitHub Actions triggered via API"; \
				printf "$(GREEN)$(ROCKET) %s$(NC)\n" "Monitor deployment: gh run list --workflow=deploy.yml"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "GitHub CLI trigger failed"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual trigger: Go to GitHub → Actions → Run workflow"; \
			fi; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "GitHub CLI not found"; \
			printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual trigger: Go to GitHub → Actions → Run workflow"; \
		fi; \
	fi

trigger-github-actions: ## 🚀 Trigger GitHub Actions CI/CD (Tag Push + API)
	@printf "\n"
	@printf "$(CYAN)🚀 Triggering GitHub Actions CI/CD$(NC)\n"
	@printf "\n"
	@VERSION=$$(grep "version:" pubspec.yaml | cut -d' ' -f2 | tr -d ' '); \
	if [ -z "$$VERSION" ]; then \
		printf "$(RED)$(CROSS) %s$(NC)\n" "Could not extract version from pubspec.yaml"; \
		exit 1; \
	fi; \
	printf "$(CYAN)$(INFO) %s$(NC)\n" "Extracted version: $$VERSION"; \
	TAG_NAME="v$$VERSION"; \
	printf "$(CYAN)$(GEAR) %s$(NC)\n" "Creating git tag: $$TAG_NAME"; \
	if git tag -a "$$TAG_NAME" -m "🚀 Production release $$VERSION" 2>/dev/null; then \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "Git tag created: $$TAG_NAME"; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Git tag already exists or failed to create"; \
	fi; \
	printf "$(CYAN)$(GEAR) %s$(NC)\n" "Pushing git tag to remote..."; \
	if git push origin "$$TAG_NAME" 2>/dev/null; then \
		printf "$(GREEN)$(CHECK) %s$(NC)\n" "Git tag pushed successfully"; \
		printf "$(CYAN)$(GEAR) %s$(NC)\n" "GitHub Actions triggered by tag push"; \
		printf "$(GREEN)$(ROCKET) %s$(NC)\n" "Monitor deployment: https://github.com/$$(git remote get-url origin | sed 's/.*github.com[:/]\([^.]*\).*/\1/')/actions"; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Git push failed - trying GitHub API trigger..."; \
		if command -v gh >/dev/null 2>&1; then \
			printf "$(CYAN)$(GEAR) %s$(NC)\n" "Using GitHub CLI to trigger workflow..."; \
			if gh workflow run deploy.yml --field environment=production --field platforms=all 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "GitHub Actions triggered via API"; \
				printf "$(GREEN)$(ROCKET) %s$(NC)\n" "Monitor deployment: gh run list --workflow=deploy.yml"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "GitHub CLI trigger failed"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual trigger: Go to GitHub → Actions → Run workflow"; \
			fi; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "GitHub CLI not found"; \
			printf "$(CYAN)$(INFO) %s$(NC)\n" "Install: brew install gh"; \
			printf "$(CYAN)$(INFO) %s$(NC)\n" "Or trigger manually on GitHub"; \
		fi; \
	fi
	@printf "\n"
	@printf "$(GREEN)🚀 GitHub Actions Pipeline Triggered!$(NC)\n"
	@printf "$(CYAN)$(INFO) %s$(NC)\n" "Check GitHub Actions for automated deployment status"

# ═══════════════════════════════════════════════════════════════════════════════
# 🔍 SYSTEM & DIAGNOSTICS
# ═══════════════════════════════════════════════════════════════════════════════

system-check: ## 🔍 Comprehensive System Configuration Check
	@printf "$(CYAN)🔍 System Configuration Check$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Checking Flutter installation..."
	@if command -v flutter >/dev/null 2>&1; then printf "$(GREEN)$(CHECK) %s$(NC)\n" "Flutter installed"; else printf "$(RED)$(CROSS) %s$(NC)\n" "Flutter not installed"; fi
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Checking project structure..."
	@if [ -f "pubspec.yaml" ]; then printf "$(GREEN)$(CHECK) %s$(NC)\n" "pubspec.yaml found"; else printf "$(RED)$(CROSS) %s$(NC)\n" "pubspec.yaml missing"; fi
	@if [ -d "android" ]; then printf "$(GREEN)$(CHECK) %s$(NC)\n" "Android directory found"; else printf "$(RED)$(CROSS) %s$(NC)\n" "Android directory missing"; fi
	@if [ -d "ios" ]; then printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS directory found"; else printf "$(RED)$(CROSS) %s$(NC)\n" "iOS directory missing"; fi
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Checking CI/CD configuration..."
	@if [ -f "android/fastlane/Fastfile" ]; then printf "$(GREEN)$(CHECK) %s$(NC)\n" "Android Fastlane configured"; else printf "$(RED)$(CROSS) %s$(NC)\n" "Android needs setup - See docs/ANDROID_SETUP_GUIDE.md"; fi
	@if [ -f "ios/fastlane/Fastfile" ]; then printf "$(GREEN)$(CHECK) %s$(NC)\n" "iOS Fastlane configured"; else printf "$(RED)$(CROSS) %s$(NC)\n" "iOS needs setup - See docs/IOS_SETUP_GUIDE.md"; fi
	@if [ -f ".github/workflows/deploy.yml" ]; then printf "$(GREEN)$(CHECK) %s$(NC)\n" "GitHub Actions configured"; else printf "$(RED)$(CROSS) %s$(NC)\n" "GitHub Actions needs setup"; fi

system-tester: system-check ## 🧪 Alias for system-check (checks system for tester deployment)

# ═══════════════════════════════════════════════════════════════════════════════
# 📦 DEPENDENCIES & SETUP
# ═══════════════════════════════════════════════════════════════════════════════

deps: ## 📦 Install dependencies
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Installing dependencies..."
	@flutter pub get
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Installing Ruby gems..."
	@if command -v ruby >/dev/null 2>&1 && command -v gem >/dev/null 2>&1; then \
		if ! command -v bundle >/dev/null 2>&1; then \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundler not found. Installing..."; \
			if gem install bundler 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Bundler installed successfully"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundler install failed - continuing without gems"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual fix: gem install bundler"; \
			fi; \
		fi; \
		if [ -f "Gemfile" ] && command -v bundle >/dev/null 2>&1; then \
			printf "$(CYAN)$(GEAR) %s$(NC)\n" "Installing from Gemfile..."; \
			if bundle install 2>/dev/null; then \
				printf "$(GREEN)$(CHECK) %s$(NC)\n" "Ruby gems installed from Gemfile"; \
			else \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Bundle install failed - continuing without gems"; \
				printf "$(CYAN)$(INFO) %s$(NC)\n" "Manual fix: bundle install"; \
			fi; \
		else \
			printf "$(YELLOW)$(WARNING) %s$(NC)\n" "No Gemfile found or bundler unavailable - skipping gems"; \
		fi; \
	else \
		printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Ruby/Gems not available - skipping gem dependencies"; \
		printf "$(CYAN)$(INFO) %s$(NC)\n" "Install Ruby to enable Fastlane functionality"; \
	fi
	@if [ -f "ios/Podfile" ]; then \
		printf "$(CYAN)$(GEAR) %s$(NC)\n" "Installing iOS dependencies..."; \
		cd ios && pod install --silent || { \
			printf "$(RED)$(CROSS) %s$(NC)\n" "Pod install failed. Trying fix..."; \
			if [ -f "Podfile.fixed" ]; then \
				cp Podfile.fixed Podfile && \
				printf "$(YELLOW)$(WARNING) %s$(NC)\n" "Applied Podfile fix, retrying..."; \
				pod install --silent || \
				printf "$(RED)$(CROSS) %s$(NC)\n" "Pod install still failing. Run: ./apply_podfile_fix.sh"; \
			else \
				printf "$(RED)$(CROSS) %s$(NC)\n" "Pod install failed. Run: ./apply_podfile_fix.sh"; \
			fi; \
		}; \
	fi
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Dependencies installed"

setup: ## Setup and configure development environment
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(GEAR) $(WHITE)Development Environment Setup$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Installing Dependencies"
	@flutter pub get > /dev/null && printf "$(GREEN)$(CHECK) %s$(NC)\n" "Flutter packages updated"
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Development environment setup completed successfully!"
	@printf "\n"

doctor: ## Run comprehensive health checks and diagnostics
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(MAGNIFY) $(WHITE)System Health Check & Diagnostics$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Flutter Doctor Diagnosis"
	@printf "$(GRAY)Running Flutter doctor...$(NC)\n"
	@flutter doctor -v
	@printf "$(GRAY)─────────────────────────────────────────────────────────────────$(NC)\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Project Configuration"
	@printf "$(PURPLE)$(BOLD)Project Details:$(NC)\n"
	@printf "$(WHITE)  $(PHONE) Name:$(NC)          $(CYAN)$(PROJECT_NAME)$(NC)\n"
	@printf "$(WHITE)  $(PACKAGE) Package:$(NC)       $(CYAN)$(PACKAGE_NAME)$(NC)\n"
	@printf "$(WHITE)  $(SPARKLES) Version:$(NC)       $(CYAN)$(VERSION_FULL)$(NC)\n"
	@printf "$(WHITE)  $(COMPUTER) Flutter:$(NC)       $(CYAN)%s$(NC)\n" "$$(flutter --version | head -1 | cut -d' ' -f2)"
	@printf "\n"

clean: ## Clean all build artifacts and temporary files
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(CLEAN) $(WHITE)Cleaning Build Artifacts$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Flutter Clean"
	@flutter clean > /dev/null && printf "$(GREEN)$(CHECK) %s$(NC)\n" "Flutter cache cleared"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Removing Temporary Files"
	@rm -rf build/ && printf "$(GREEN)$(CHECK) %s$(NC)\n" "Build directory removed"
	@printf "$(GREEN)$(CHECK) %s$(NC)\n" "Cleanup completed successfully!"
	@printf "\n"

build: ## Build optimized Android APK with detailed progress
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(PACKAGE) $(WHITE)Building Android APK$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)$(GEAR) %s$(NC)\n" "Building Android APK"
	@flutter build apk --release
	@if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then \
		APK_SIZE=$$(du -h "build/app/outputs/flutter-apk/app-release.apk" | awk '{print $$1}'); \
		printf "$(GREEN)$(CHECK) %s (Size: $$APK_SIZE)$(NC)\n" "APK built successfully"; \
		printf "$(WHITE)  Location:$(NC) build/app/outputs/flutter-apk/app-release.apk\n"; \
	else \
		printf "$(RED)$(CROSS) %s$(NC)\n" "APK build failed"; \
	fi
	@printf "\n"

test: ## Run comprehensive test suite with coverage
	@printf "\n"
	@printf "$(BLUE)╔══════════════════════════════════════════════════════════════╗$(NC)\n"
	@printf "$(BLUE)║$(NC) $(MAGNIFY) $(WHITE)Running Test Suite$(NC) $(BLUE)║$(NC)\n"
	@printf "$(BLUE)╚══════════════════════════════════════════════════════════════╝$(NC)\n"
	@printf "\n"
	@printf "$(CYAN)