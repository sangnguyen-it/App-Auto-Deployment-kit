# Makefile for Flutter Project with App-Auto-Deployment-kit
# Copy this file to your Flutter project root as 'Makefile'

.PHONY: help setup build deploy clean test doctor
.DEFAULT_GOAL := help

# Configuration - Update these values for your project
SHELL := /bin/bash
PROJECT_NAME := Your Flutter App
APP_NAME := your_app
FLUTTER_VERSION := stable

# Deployment Kit Repository
DEPLOYMENT_KIT_REPO := https://github.com/sangnguyen-it/App-Auto-Deployment-kit
DEPLOYMENT_KIT_DIR := .deployment-kit

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
NC := \033[0m # No Color

# Print colored output
define print_info
	@echo -e "$(BLUE)‚ÑπÔ∏è  $(1)$(NC)"
endef

define print_success
	@echo -e "$(GREEN)‚úÖ $(1)$(NC)"
endef

define print_warning
	@echo -e "$(YELLOW)‚ö†Ô∏è  $(1)$(NC)"
endef

define print_error
	@echo -e "$(RED)‚ùå $(1)$(NC)"
endef

help: ## Show this help message
	@echo -e "$(CYAN)üì± $(PROJECT_NAME) - Flutter CI/CD Commands$(NC)"
	@echo
	@echo -e "$(PURPLE)Available commands:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(BLUE)%-20s$(NC) %s\n", $$1, $$2}'
	@echo
	@echo -e "$(PURPLE)Examples:$(NC)"
	@echo "  make setup              # Setup development environment"
	@echo "  make build-ios         # Build iOS app locally"
	@echo "  make deploy-beta       # Deploy beta versions"
	@echo "  make deploy-release    # Deploy production versions"

setup: ## Setup development environment
	$(call print_info,"Setting up development environment for $(PROJECT_NAME)...")
	@# Check Flutter
	@command -v flutter >/dev/null 2>&1 || { $(call print_error,"Flutter is required but not installed"); exit 1; }
	@# Check Ruby and Bundler
	@command -v ruby >/dev/null 2>&1 || { $(call print_error,"Ruby is required but not installed"); exit 1; }
	@command -v bundle >/dev/null 2>&1 || { $(call print_error,"Bundler is required but not installed"); exit 1; }
	@# Install Ruby dependencies
	$(call print_info,"Installing Ruby gems...")
	@bundle install
	@# Get Flutter dependencies
	$(call print_info,"Getting Flutter dependencies...")
	@flutter pub get
	@# Setup iOS (if on macOS)
	@if [ "$$(uname)" = "Darwin" ]; then \
		$(call print_info,"Setting up iOS environment..."); \
		cd ios && bundle exec fastlane ios setup; \
	fi
	@# Setup Android
	$(call print_info,"Setting up Android environment...")
	@cd android && bundle exec fastlane android setup
	$(call print_success,"Development environment setup completed!")

doctor: ## Run Flutter doctor and environment checks
	$(call print_info,"Running environment diagnostics...")
	@echo -e "$(PURPLE)Flutter Doctor:$(NC)"
	@flutter doctor -v
	@echo
	@echo -e "$(PURPLE)Project Information:$(NC)"
	@echo "  Name: $(APP_NAME)"
	@echo "  Version: $$(grep "version:" pubspec.yaml | cut -d' ' -f2)"
	@echo "  Flutter: $$(flutter --version | head -1)"
	@echo "  Dart: $$(dart --version | head -1)"
	@if command -v bundle >/dev/null 2>&1; then \
		echo "  Ruby: $$(ruby --version)"; \
		echo "  Fastlane: $$(bundle exec fastlane --version)"; \
	fi
	@if [ "$$(uname)" = "Darwin" ]; then \
		echo "  Xcode: $$(xcodebuild -version | head -1)" 2>/dev/null || echo "  Xcode: Not available"; \
		echo "  CocoaPods: $$(pod --version)" 2>/dev/null || echo "  CocoaPods: Not available"; \
	fi

clean: ## Clean build artifacts
	$(call print_info,"Cleaning build artifacts...")
	@flutter clean
	@# Clean iOS
	@if [ -d "ios" ]; then \
		cd ios && xcodebuild clean -workspace Runner.xcworkspace -scheme Runner >/dev/null 2>&1 || true; \
	fi
	@# Clean Android
	@if [ -d "android" ]; then \
		cd android && ./gradlew clean >/dev/null 2>&1 || true; \
	fi
	@# Clean temporary files
	@rm -rf build/
	@rm -f android/key.properties
	@rm -f android/fastlane/play_store_service_account.json
	@rm -f ios/fastlane/AuthKey_*.p8
	$(call print_success,"Cleanup completed!")

# Build commands
build: ## Build both iOS and Android apps locally
	$(call print_info,"Building both platforms...")
	@$(MAKE) build-android
	@if [ "$$(uname)" = "Darwin" ]; then \
		$(MAKE) build-ios; \
	else \
		$(call print_warning,"Skipping iOS build (not on macOS)"); \
	fi

build-ios: ## Build iOS app locally
	$(call print_info,"Building iOS app...")
	@if [ "$$(uname)" != "Darwin" ]; then \
		$(call print_error,"iOS build requires macOS"); \
		exit 1; \
	fi
	@cd ios && bundle exec fastlane ios build

build-android: ## Build Android app locally
	$(call print_info,"Building Android app...")
	@cd android && bundle exec fastlane android build

# Testing commands
test: ## Run all tests
	$(call print_info,"Running Flutter tests...")
	@flutter test --coverage

test-integration: ## Run integration tests
	$(call print_info,"Running integration tests...")
	@flutter test integration_test/

# Version management
version-bump: ## Bump version number
	$(call print_info,"Bumping version...")
	@if [ -f "$(DEPLOYMENT_KIT_DIR)/scripts/version_manager.dart" ]; then \
		dart $(DEPLOYMENT_KIT_DIR)/scripts/version_manager.dart bump; \
	else \
		$(call print_warning,"Version manager not found. Updating manually..."); \
		@read -p "Enter bump type (major/minor/patch/build) [build]: " BUMP_TYPE; \
		BUMP_TYPE=$${BUMP_TYPE:-build}; \
		echo "Bumping $$BUMP_TYPE version..."; \
	fi
	@git add pubspec.yaml
	@git commit -m "chore: bump version" || true

changelog: ## Generate changelog
	$(call print_info,"Generating changelog...")
	@if [ -f "$(DEPLOYMENT_KIT_DIR)/scripts/changelog_generator.sh" ]; then \
		$(DEPLOYMENT_KIT_DIR)/scripts/changelog_generator.sh; \
	else \
		$(call print_warning,"Changelog generator not found"); \
	fi

# Deployment commands
deploy-beta: ## Deploy beta versions to TestFlight and Play Console Internal Testing
	$(call print_info,"Deploying beta versions...")
	@$(MAKE) version-bump
	@$(MAKE) changelog
	@git tag v$$(grep "version:" pubspec.yaml | cut -d' ' -f2 | tr -d '\n')-beta
	@git push origin --tags
	$(call print_success,"Beta deployment triggered! Check GitHub Actions for progress.")

deploy-release: ## Deploy production versions to App Store and Play Store
	$(call print_info,"Deploying production versions...")
	@$(MAKE) version-bump
	@$(MAKE) changelog
	@git tag v$$(grep "version:" pubspec.yaml | cut -d' ' -f2 | tr -d '\n')
	@git push origin --tags
	$(call print_success,"Production deployment triggered! Check GitHub Actions for progress.")

# Local deployment (for testing)
deploy-ios-beta: ## Deploy iOS beta locally (requires proper certificates)
	$(call print_info,"Deploying iOS beta...")
	@if [ "$$(uname)" != "Darwin" ]; then \
		$(call print_error,"iOS deployment requires macOS"); \
		exit 1; \
	fi
	@cd ios && bundle exec fastlane ios beta

deploy-android-beta: ## Deploy Android beta locally (requires proper credentials)
	$(call print_info,"Deploying Android beta...")
	@cd android && bundle exec fastlane android beta

deploy-ios-release: ## Deploy iOS production locally (requires proper certificates)
	$(call print_info,"Deploying iOS production...")
	@if [ "$$(uname)" != "Darwin" ]; then \
		$(call print_error,"iOS deployment requires macOS"); \
		exit 1; \
	fi
	@cd ios && bundle exec fastlane ios release

deploy-android-release: ## Deploy Android production locally (requires proper credentials)
	$(call print_info,"Deploying Android production...")
	@cd android && bundle exec fastlane android release

# Utility commands
update-deployment-kit: ## Update deployment kit to latest version
	$(call print_info,"Updating deployment kit...")
	@if [ -d "$(DEPLOYMENT_KIT_DIR)" ]; then \
		cd $(DEPLOYMENT_KIT_DIR) && git pull origin main; \
	else \
		git clone $(DEPLOYMENT_KIT_REPO) $(DEPLOYMENT_KIT_DIR); \
	fi
	$(call print_success,"Deployment kit updated!")

check-secrets: ## Verify deployment secrets are configured
	$(call print_info,"Checking deployment secrets...")
	@echo "This command would check if GitHub Secrets are properly configured:"
	@echo "iOS Secrets:"
	@echo "  - APP_STORE_KEY_ID"
	@echo "  - APP_STORE_ISSUER_ID"  
	@echo "  - APP_STORE_KEY_CONTENT"
	@echo "Android Secrets:"
	@echo "  - ANDROID_KEYSTORE_BASE64"
	@echo "  - KEYSTORE_PASSWORD"
	@echo "  - PLAY_STORE_JSON_BASE64"
	@echo
	@echo "Please ensure these are set in GitHub repository settings > Secrets and variables > Actions"

info: ## Show project information
	@echo -e "$(CYAN)üì± $(PROJECT_NAME)$(NC)"
	@echo -e "$(PURPLE)Package:$(NC) $(APP_NAME)"
	@echo -e "$(PURPLE)Version:$(NC) $$(grep "version:" pubspec.yaml | cut -d' ' -f2)"
	@echo -e "$(PURPLE)Git Branch:$(NC) $$(git branch --show-current 2>/dev/null || echo 'unknown')"
	@echo -e "$(PURPLE)Last Commit:$(NC) $$(git log -1 --format="%h - %s (%cr)" 2>/dev/null || echo 'unknown')"
	@echo
	@echo -e "$(PURPLE)Deployment Status:$(NC)"
	@echo "  iOS Fastlane: $$([ -f 'ios/fastlane/Fastfile' ] && echo '‚úì Configured' || echo '‚ùå Not configured')"
	@echo "  Android Fastlane: $$([ -f 'android/fastlane/Fastfile' ] && echo '‚úì Configured' || echo '‚ùå Not configured')"
	@echo "  GitHub Actions: $$([ -f '.github/workflows/deploy.yml' ] && echo '‚úì Configured' || echo '‚ùå Not configured')"

# Development workflow
dev-setup: ## Complete development setup (run once)
	$(call print_info,"Setting up complete development environment...")
	@$(MAKE) setup
	@$(MAKE) update-deployment-kit
	@$(MAKE) doctor
	$(call print_success,"Development setup completed! You're ready to start developing.")

# Quick deployment workflow  
quick-beta: ## Quick beta deployment (version bump + deploy)
	$(call print_info,"Quick beta deployment...")
	@$(MAKE) test
	@$(MAKE) deploy-beta

quick-release: ## Quick production deployment (version bump + deploy)
	$(call print_info,"Quick production deployment...")
	@$(MAKE) test
	@$(MAKE) deploy-release

# Monitoring & Analytics commands
monitor-init: ## Initialize deployment monitoring
	$(call print_info,"Initializing deployment monitoring...")
	@if [ -f "$(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart" ]; then \
		dart $(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart init; \
	else \
		$(call print_warning,"Deployment monitor not found"); \
	fi

monitor-track: ## Track current deployment
	$(call print_info,"Tracking deployment...")
	@if [ -f "$(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart" ]; then \
		dart $(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart track android $$(grep "version:" pubspec.yaml | cut -d' ' -f2); \
	fi

monitor-analyze: ## Analyze deployment metrics
	$(call print_info,"Analyzing deployment metrics...")
	@if [ -f "$(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart" ]; then \
		dart $(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart analyze 30; \
	fi

monitor-report: ## Generate deployment report
	$(call print_info,"Generating deployment report...")
	@if [ -f "$(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart" ]; then \
		dart $(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart report markdown; \
	fi

monitor-health: ## Check deployment system health
	$(call print_info,"Checking deployment system health...")
	@if [ -f "$(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart" ]; then \
		dart $(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart health; \
	fi

setup-webhook: ## Setup deployment webhooks (Slack/Discord)
	$(call print_info,"Setting up deployment webhooks...")
	@read -p "Enter webhook URL: " WEBHOOK_URL; \
	read -p "Enter event type (deploy/build/error): " EVENT_TYPE; \
	if [ -f "$(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart" ]; then \
		dart $(DEPLOYMENT_KIT_DIR)/scripts/deployment_monitor.dart webhook "$$WEBHOOK_URL" "$$EVENT_TYPE"; \
	fi
