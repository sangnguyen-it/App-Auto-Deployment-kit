name: 'Deploy Flutter Apps'
description: 'Deploy Flutter apps to iOS App Store and Google Play Store'
author: 'sangnguyen-it'

inputs:
  app_name:
    description: 'Application name'
    required: true
  
  environment:
    description: 'Deployment environment (beta, production)'
    required: false
    default: 'beta'
  
  platforms:
    description: 'Platforms to deploy (ios, android, all)'
    required: false
    default: 'all'
  
  ios_scheme:
    description: 'iOS scheme name'
    required: false
    default: 'Runner'
  
  android_build_type:
    description: 'Android build type (appbundle, apk)'
    required: false
    default: 'appbundle'
  
  rollout_percentage:
    description: 'Android rollout percentage (1-100)'
    required: false
    default: '100'
  
  skip_build:
    description: 'Skip build step (useful for testing deployment only)'
    required: false
    default: 'false'
  
  enable_notifications:
    description: 'Enable deployment notifications'
    required: false
    default: 'true'

outputs:
  ios_deployed:
    description: 'Whether iOS app was deployed'
    value: ${{ steps.deploy_summary.outputs.ios_deployed }}
  
  android_deployed:
    description: 'Whether Android app was deployed'
    value: ${{ steps.deploy_summary.outputs.android_deployed }}
  
  deployment_url:
    description: 'URL to view deployment results'
    value: ${{ steps.deploy_summary.outputs.deployment_url }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ ! "${{ inputs.environment }}" =~ ^(beta|production)$ ]]; then
          echo "❌ Invalid environment: ${{ inputs.environment }}. Must be 'beta' or 'production'"
          exit 1
        fi
        
        if [[ ! "${{ inputs.platforms }}" =~ ^(ios|android|all)$ ]]; then
          echo "❌ Invalid platforms: ${{ inputs.platforms }}. Must be 'ios', 'android', or 'all'"
          exit 1
        fi
        
        echo "✅ Input validation passed"
        echo "App: ${{ inputs.app_name }}"
        echo "Environment: ${{ inputs.environment }}"
        echo "Platforms: ${{ inputs.platforms }}"
    
    - name: Setup deployment environment
      shell: bash
      run: |
        echo "🔧 Setting up deployment environment..."
        
        # Create temp directories
        mkdir -p /tmp/deployment-logs
        
        # Set deployment info
        echo "DEPLOYMENT_START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        echo "DEPLOYMENT_ID=${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_ENV
        
        echo "✅ Deployment environment ready"
    
    - name: Setup iOS signing (macOS only)
      if: (inputs.platforms == 'ios' || inputs.platforms == 'all') && runner.os == 'macOS'
      shell: bash
      run: |
        echo "🍎 Setting up iOS signing..."
        
        # Validate iOS environment variables
        REQUIRED_VARS=("APP_STORE_KEY_ID" "APP_STORE_ISSUER_ID" "APP_STORE_KEY_CONTENT")
        for var in "${REQUIRED_VARS[@]}"; do
          if [[ -z "${!var}" ]]; then
            echo "❌ Missing required iOS environment variable: $var"
            exit 1
          fi
        done
        
        # Setup certificates using Fastlane match or manual process
        if [[ "${USE_FASTLANE_MATCH:-false}" == "true" ]]; then
          echo "Using Fastlane Match for iOS signing..."
          if [[ -z "$MATCH_PASSWORD" ]]; then
            echo "❌ MATCH_PASSWORD required when using Fastlane Match"
            exit 1
          fi
        else
          echo "Using manual iOS certificate setup..."
          if [[ -z "$IOS_DIST_CERT_BASE64" || -z "$IOS_CERT_PASSWORD" ]]; then
            echo "❌ Missing manual iOS certificate variables"
            exit 1
          fi
        fi
        
        echo "✅ iOS signing validation completed"
    
    - name: Setup Android signing
      if: inputs.platforms == 'android' || inputs.platforms == 'all'
      shell: bash
      run: |
        echo "🤖 Setting up Android signing..."
        
        # Validate Android environment variables
        if [[ -z "$ANDROID_KEYSTORE_BASE64" || -z "$KEYSTORE_PASSWORD" ]]; then
          echo "❌ Missing Android keystore environment variables"
          exit 1
        fi
        
        # Decode and setup keystore
        echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/release.keystore
        
        # Create key.properties
        cat > android/key.properties << EOF
        storeFile=release.keystore
        storePassword=$KEYSTORE_PASSWORD
        keyAlias=${KEY_ALIAS:-upload}
        keyPassword=${KEY_PASSWORD:-$KEYSTORE_PASSWORD}
        EOF
        
        echo "✅ Android keystore setup completed"
    
    - name: Setup Google Play API
      if: inputs.platforms == 'android' || inputs.platforms == 'all'
      shell: bash
      run: |
        echo "🏪 Setting up Google Play API..."
        
        if [[ -n "$PLAY_STORE_JSON_BASE64" ]]; then
          echo "$PLAY_STORE_JSON_BASE64" | base64 -d > android/fastlane/play_store_service_account.json
          export FASTLANE_JSON_KEY_FILE="android/fastlane/play_store_service_account.json"
        elif [[ -n "$PLAY_STORE_JSON_KEY_DATA" ]]; then
          echo "$PLAY_STORE_JSON_KEY_DATA" > android/fastlane/play_store_service_account.json
          export FASTLANE_JSON_KEY_FILE="android/fastlane/play_store_service_account.json"
        else
          echo "❌ Missing Google Play API credentials"
          exit 1
        fi
        
        echo "✅ Google Play API setup completed"
    
    - name: Deploy iOS
      if: (inputs.platforms == 'ios' || inputs.platforms == 'all') && runner.os == 'macOS'
      shell: bash
      working-directory: ios
      run: |
        echo "🚀 Deploying iOS app..."
        
        # Set environment variables for Fastlane
        export APP_NAME="${{ inputs.app_name }}"
        export IOS_SCHEME="${{ inputs.ios_scheme }}"
        
        # Run appropriate lane based on environment
        if [[ "${{ inputs.environment }}" == "beta" ]]; then
          bundle exec fastlane ios beta
        else
          bundle exec fastlane ios release
        fi
        
        echo "✅ iOS deployment completed"
        echo "ios_success=true" >> /tmp/deployment-logs/results.txt
      continue-on-error: false
    
    - name: Deploy Android
      if: inputs.platforms == 'android' || inputs.platforms == 'all'
      shell: bash
      working-directory: android
      run: |
        echo "🚀 Deploying Android app..."
        
        # Set environment variables for Fastlane
        export APP_NAME="${{ inputs.app_name }}"
        export ANDROID_BUILD_TYPE="${{ inputs.android_build_type }}"
        export ROLLOUT_PERCENTAGE="${{ inputs.rollout_percentage }}"
        
        # Run appropriate lane based on environment
        if [[ "${{ inputs.environment }}" == "beta" ]]; then
          bundle exec fastlane android beta
        else
          if [[ "${{ inputs.rollout_percentage }}" != "100" ]]; then
            bundle exec fastlane android release rollout:${{ inputs.rollout_percentage }}
          else
            bundle exec fastlane android release
          fi
        fi
        
        echo "✅ Android deployment completed"
        echo "android_success=true" >> /tmp/deployment-logs/results.txt
      continue-on-error: false
    
    - name: Generate deployment summary
      id: deploy_summary
      shell: bash
      run: |
        echo "📊 Generating deployment summary..."
        
        # Read results
        IOS_DEPLOYED="false"
        ANDROID_DEPLOYED="false"
        
        if [[ -f "/tmp/deployment-logs/results.txt" ]]; then
          if grep -q "ios_success=true" /tmp/deployment-logs/results.txt; then
            IOS_DEPLOYED="true"
          fi
          if grep -q "android_success=true" /tmp/deployment-logs/results.txt; then
            ANDROID_DEPLOYED="true"
          fi
        fi
        
        # Set outputs
        echo "ios_deployed=$IOS_DEPLOYED" >> $GITHUB_OUTPUT
        echo "android_deployed=$ANDROID_DEPLOYED" >> $GITHUB_OUTPUT
        echo "deployment_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
        
        # Create summary
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## 🚀 Deployment Summary
        
        **App:** ${{ inputs.app_name }}
        **Environment:** ${{ inputs.environment }}
        **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ### Results
        - **iOS:** $( [[ "$IOS_DEPLOYED" == "true" ]] && echo "✅ Deployed" || echo "⏭️ Skipped" )
        - **Android:** $( [[ "$ANDROID_DEPLOYED" == "true" ]] && echo "✅ Deployed" || echo "⏭️ Skipped" )
        
        ### Deployment Details
        - **Platforms:** ${{ inputs.platforms }}
        - **iOS Scheme:** ${{ inputs.ios_scheme }}
        - **Android Build:** ${{ inputs.android_build_type }}
        - **Rollout:** ${{ inputs.rollout_percentage }}%
        
        [View full logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        EOF
        
        echo "✅ Deployment summary generated"
    
    - name: Send notification
      if: inputs.enable_notifications == 'true' && always()
      shell: bash
      run: |
        echo "📢 Sending deployment notification..."
        
        # Determine status
        if [[ "${{ job.status }}" == "success" ]]; then
          STATUS="✅ Success"
          COLOR="good"
        else
          STATUS="❌ Failed"
          COLOR="danger"
        fi
        
        # Send to Slack if webhook is configured
        if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"$STATUS: ${{ inputs.app_name }} deployment (${{ inputs.environment }})\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"fields\": [
                  {\"title\": \"App\", \"value\": \"${{ inputs.app_name }}\", \"short\": true},
                  {\"title\": \"Environment\", \"value\": \"${{ inputs.environment }}\", \"short\": true},
                  {\"title\": \"Platforms\", \"value\": \"${{ inputs.platforms }}\", \"short\": true},
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true}
                ]
              }]
            }" \
            "$SLACK_WEBHOOK_URL"
        fi
        
        # Send to Discord if webhook is configured
        if [[ -n "$DISCORD_WEBHOOK_URL" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"embeds\": [{
                \"title\": \"${{ inputs.app_name }} Deployment\",
                \"description\": \"$STATUS\",
                \"color\": $( [[ \"$COLOR\" == \"good\" ]] && echo \"5763719\" || echo \"15548997\" ),
                \"fields\": [
                  {\"name\": \"Environment\", \"value\": \"${{ inputs.environment }}\", \"inline\": true},
                  {\"name\": \"Platforms\", \"value\": \"${{ inputs.platforms }}\", \"inline\": true}
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
              }]
            }" \
            "$DISCORD_WEBHOOK_URL"
        fi
        
        echo "✅ Notifications sent"
    
    - name: Cleanup
      if: always()
      shell: bash
      run: |
        echo "🧹 Cleaning up sensitive files..."
        
        # Remove sensitive files
        rm -f android/key.properties || true
        rm -f android/app/release.keystore || true
        rm -f android/fastlane/play_store_service_account.json || true
        rm -f /tmp/dist_cert.p12 || true
        rm -f /tmp/profile.mobileprovision || true
        rm -rf /tmp/deployment-logs || true
        
        echo "✅ Cleanup completed"

branding:
  icon: 'upload-cloud'
  color: 'green'

